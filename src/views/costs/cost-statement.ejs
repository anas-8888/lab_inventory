<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex flex-column flex-lg-row justify-content-between align-items-start align-items-lg-center mb-4">
                <h2 class="mb-3 mb-lg-0"><i class="bi bi-calculator"></i> بيان الكلفة</h2>
                <div class="row g-2 align-items-center justify-content-end w-100 w-lg-auto">
                    <div class="col-12 col-md-auto">
                        <div class="input-group" style="min-width: 260px;">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            <input type="text" id="materialKeywordSearch" class="form-control" placeholder="ابحث بالاسم أو النوع">
                        </div>
                    </div>
                    <div class="col-12 col-md-auto">
                        <input type="text" id="materialDateSearch" class="form-control datepicker" placeholder="يوم/شهر/سنة" style="min-width: 220px;">
                    </div>
                    <div class="col-12 col-md-auto">
                        <button type="button" class="btn btn-primary w-100 w-md-auto" data-bs-toggle="modal" data-bs-target="#addMaterialModal">
                            <i class="bi bi-plus-circle me-1"></i> إضافة مادة جديدة
                        </button>
                    </div>
                    <div class="col-12 col-md-auto">
                        <a href="/costs" class="btn btn-outline-secondary w-100 w-md-auto">
                            <i class="bi bi-arrow-right me-1"></i> العودة للتكاليف
                        </a>
                    </div>
                </div>
            </div>

            <!-- جدول المواد الموجودة -->
            <% if (materials && materials.length > 0) { %>
            <div class="card shadow">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-list-ul"></i> المواد المسجلة</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table id="materialsTable" class="table table-hover">
                            <thead>
                                <tr>
                                    <th>اسم المادة</th>
                                    <th>وحدة التعبئة</th>
                                    <th>كلفة القطعة</th>
                                    <th>كلفة الطرد</th>
                                    <th>وزن الطرد القائم</th>
                                    <th>الوزن الصافي</th>
                                    <th>شد الكرتون</th>
                                    <th>كلفة الكيلو</th>
                                    <th>تاريخ الإضافة</th>
                                    <th>الإجراءات</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% materials.forEach(material => { %>
                                <tr>
                                    <td class="material-name"><%= material.material_name %><span class="material-type" style="display:none"><%= material.material_type %></span></td>
                                    <td><%= material.packaging_unit || '-' %></td>
                                    <td>
                                        <%= (defaultCurrency && defaultCurrency.code === 'SYP')
                                            ? String(Math.round(parseFloat(material.unit_cost) || 0))
                                            : (parseFloat(material.unit_cost) || 0).toFixed(2)
                                        %> <%= defaultCurrency ? defaultCurrency.symbol : '$' %>
                                    </td>
                                    <td>
                                        <%= (defaultCurrency && defaultCurrency.code === 'SYP')
                                            ? String(Math.round(parseFloat(material.package_cost) || 0))
                                            : (parseFloat(material.package_cost) || 0).toFixed(2)
                                        %> <%= defaultCurrency ? defaultCurrency.symbol : '$' %>
                                    </td>
                                    <td>
                                        <%= (material.gross_package_weight != null) ? Number(material.gross_package_weight).toFixed(3) : '-' %> كجم
                                    </td>
                                    <td>
                                        <% const netW = parseFloat(material.packaging_weight); %>
                                        <%= (!isNaN(netW)) ? netW.toFixed(3) : '-' %> كجم
                                    </td>
                                    <td>
                                        <%= (material.pieces_per_package != null) ? Number(material.pieces_per_package) : '-' %>
                                    </td>
                                    <td>
                                        <% 
                                            const netWForCalc = parseFloat(material.packaging_weight);
                                            const unitCostVal = parseFloat(material.unit_cost) || 0;
                                            const costPerKg = (!isNaN(netWForCalc) && netWForCalc > 0) ? (unitCostVal / netWForCalc) : null;
                                        %>
                                        <%= (costPerKg != null)
                                            ? ((defaultCurrency && defaultCurrency.code === 'SYP')
                                                ? String(Math.round(costPerKg))
                                                : costPerKg.toFixed(2))
                                            : '-' 
                                        %> <%= defaultCurrency ? defaultCurrency.symbol : '$' %>
                                    </td>
                                    <td class="material-date" data-date="<%= new Date(material.created_at).toISOString().slice(0,10) %>"><%= formatDate(material.created_at) %></td>
                                    <td>
                                        <div class="btn-group">
                                            <a href="/costs/cost-statement/<%= material.id %>/preview" class="btn btn-sm btn-success" title="معاينة">
                                                <i class="bi bi-eye"></i>
                                            </a>
                                            <button type="button" class="btn btn-sm btn-info" onclick="editMaterial(<%= material.id %>)" title="تعديل">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-danger" onclick="deleteMaterial(<%= material.id %>)" title="حذف">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                <% }); %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <% } else { %>
            <div class="card shadow">
                <div class="card-body text-center py-5">
                    <i class="bi bi-inbox display-1 text-muted mb-3"></i>
                    <h4 class="text-muted">لا توجد مواد مسجلة</h4>
                    <p class="text-muted">اضغط على زر "إضافة مادة جديدة" لبدء إضافة المواد</p>
                </div>
            </div>
            <% } %>
        </div>
    </div>
</div>

<!-- Modal إضافة مادة جديدة -->
<div class="modal fade" id="addMaterialModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="bi bi-plus-circle"></i> إضافة مادة جديدة</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="إغلاق"></button>
            </div>
            <div class="modal-body">
                <form id="materialForm" method="POST" action="/costs/cost-statement">
                    <div class="row g-3">
                        <!-- نوع المادة -->
                        <div class="col-md-6">
                            <label class="form-label">نوع المادة *</label>
                            <input type="text" class="form-control" name="material_type" value="زيتون" required>
                        </div>

                        <!-- اسم المادة -->
                        <div class="col-md-6">
                            <label class="form-label">اسم المادة *</label>
                            <input type="text" class="form-control" name="material_name" required>
                        </div>

                        <!-- طريقة الحساب -->
                        <div class="col-12">
                            <label class="form-label">طريقة حساب التكلفة *</label>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="calculation_method" id="traditionalMethod" value="traditional" checked onchange="toggleCalculationMethod()">
                                        <label class="form-check-label" for="traditionalMethod">
                                            <strong>الطريقة التقليدية</strong>
                                            <small class="d-block text-muted">إدخال السعر والوزن الإجمالي مباشرة</small>
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="calculation_method" id="componentsMethod" value="components" onchange="toggleCalculationMethod()">
                                        <label class="form-check-label" for="componentsMethod">
                                            <strong>الحساب بالعناصر الفرعية</strong>
                                            <small class="d-block text-muted">تحديد مكونات المادة بالتفصيل</small>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- الطريقة التقليدية -->
                        <div id="traditionalFields" class="col-12">
                            <div class="row g-3">
                        <!-- السعر قبل الهدر (سعر كلي للوزن الجمالي) -->
                                <div class="col-md-6">
                            <label class="form-label">السعر قبل الهدر (إجمالي) <%= defaultCurrency ? defaultCurrency.symbol : '$' %> *</label>
                                    <input type="number" class="form-control" name="price_before_waste" step="0.01">
                            <small class="text-muted">أدخل السعر الكلي، وسيتم احتساب سعر الكيلو تلقائياً = السعر ÷ الوزن الجمالي</small>
                        </div>

                        <!-- الوزن الجمالي -->
                                <div class="col-md-6">
                            <label class="form-label">الوزن الإجمالي (كجم) *</label>
                                    <input type="number" class="form-control" name="gross_weight" step="0.01">
                                </div>
                            </div>
                        </div>

                        <!-- الحساب بالعناصر الفرعية -->
                        <div id="componentsFields" class="col-12" style="display: none;">
                            <div class="card border-info">
                                <div class="card-header bg-light">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0"><i class="bi bi-puzzle"></i> العناصر الفرعية للمادة</h6>
                                        <button type="button" class="btn btn-outline-primary btn-sm" onclick="addComponentRow()">
                                            <i class="bi bi-plus"></i> إضافة عنصر
                                        </button>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-bordered" id="componentsTable">
                                            <thead>
                                                <tr>
                                                    <th style="width: 35%;">اسم العنصر *</th>
                                                    <th style="width: 20%;">الوزن (غرام) *</th>
                                                    <th style="width: 25%;">سعر الكيلو (<%= defaultCurrency ? defaultCurrency.symbol : '$' %>) *</th>
                                                    <th style="width: 15%;">التكلفة</th>
                                                    <th style="width: 5%;">الإجراءات</th>
                                                </tr>
                                            </thead>
                                            <tbody id="componentsTableBody">
                                                <!-- سيتم إضافة الصفوف ديناميكياً -->
                                            </tbody>
                                            <tfoot>
                                                <tr class="table-info">
                                                    <th>المجموع</th>
                                                    <th id="totalWeightGrams">0 غ</th>
                                                    <th id="avgPricePerKg">0.00 <%= defaultCurrency ? defaultCurrency.symbol : '$' %></th>
                                                    <th id="totalComponentsCost">0.00 <%= defaultCurrency ? defaultCurrency.symbol : '$' %></th>
                                                    <th></th>
                                                </tr>
                                                <tr class="table-success">
                                                    <th colspan="2">الوزن الإجمالي: <span id="calculatedTotalWeight">0.000 كجم</span></th>
                                                    <th colspan="3">السعر الإجمالي: <span id="calculatedTotalPrice">0.00 <%= defaultCurrency ? defaultCurrency.symbol : '$' %></span></th>
                                                </tr>
                                            </tfoot>
                                        </table>
                                    </div>
                                    <div class="alert alert-info mt-3">
                                        <small>
                                            <i class="bi bi-info-circle"></i>
                                            <strong>ملاحظة:</strong> سيتم حساب الوزن الإجمالي والسعر الإجمالي تلقائياً من مجموع العناصر المضافة.
                                            سعر الكيلو النهائي = السعر الإجمالي ÷ الوزن الإجمالي
                                        </small>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- نسبة الهدر -->
                        <div class="col-md-4">
                            <label class="form-label">نسبة الهدر (%) *</label>
                            <input type="number" class="form-control" name="waste_percentage" step="0.01" required>
                        </div>

                        <!-- وحدة التعبئة -->
                        <div class="col-md-4">
                            <label class="form-label">وحدة التعبئة *</label>
                            <input type="text" class="form-control" name="packaging_unit" value="سطل" required>
                        </div>

                        <!-- وزن المادة (داخل العبوة) -->
                        <div class="col-md-4">
                            <label class="form-label">وزن المادة (كجم) *</label>
                            <input type="number" class="form-control" name="packaging_weight" step="0.001" required>
                            <small class="text-muted">هذا وزن المادة داخل العبوة</small>
                        </div>

                        <!-- وزن وحدة التعبئة (وزن العبوة الفارغة) -->
                        <div class="col-md-4">
                            <label class="form-label">وزن وحدة التعبئة (كجم) *</label>
                            <input type="number" class="form-control" name="packaging_unit_weight" step="0.001" required>
                            <small class="text-muted">وزن العبوة الفارغة بدون المادة</small>
                        </div>

                        <!-- ثمن العبوة الفارغة -->
                        <div class="col-md-4">
                            <label class="form-label">ثمن العبوة الفارغة (<%= defaultCurrency ? defaultCurrency.symbol : '$' %>) *</label>
                            <input type="number" class="form-control" name="empty_package_price" step="0.01" required>
                        </div>
                        <!-- أوزان إضافية -->
                        <div class="col-12">
                            <label class="form-label">أوزان إضافية</label>
                            <div id="extraWeightsContainer"></div>
                            <button type="button" class="btn btn-outline-secondary mt-2" id="addExtraWeightBtn">إضافة وزن إضافي</button>
                            <small class="text-muted d-block mt-1">يمكنك إضافة عدة مواد إضافية مع أوزانها، تُحسب ضمن وزن الطرد القائم</small>
                        </div>

                        <!-- ثمن اللصاقة -->
                        <div class="col-md-4">
                            <label class="form-label">ثمن اللصاقة (<%= defaultCurrency ? defaultCurrency.symbol : '$' %>) *</label>
                            <input type="number" class="form-control" name="sticker_price" step="0.01" required>
                        </div>

                        <!-- مصاريف إضافية -->
                        <div class="col-md-4">
                            <label class="form-label">مصاريف إضافية (<%= defaultCurrency ? defaultCurrency.symbol : '$' %>) *</label>
                            <input type="number" class="form-control" name="additional_expenses" step="0.01" required>
                        </div>

                        <!-- مصروف عمال -->
                        <div class="col-md-4">
                            <label class="form-label">مصروف عمال (<%= defaultCurrency ? defaultCurrency.symbol : '$' %>) *</label>
                            <input type="number" class="form-control" name="labor_cost" step="0.01" required>
                        </div>

                        <!-- مواد حافظة -->
                        <div class="col-md-4">
                            <label class="form-label">مواد حافظة (<%= defaultCurrency ? defaultCurrency.symbol : '$' %>) *</label>
                            <input type="number" class="form-control" name="preservatives_cost" step="0.01" required>
                        </div>

                        <!-- ثمن كرتونة -->
                        <div class="col-md-4">
                            <label class="form-label">ثمن كرتونة (<%= defaultCurrency ? defaultCurrency.symbol : '$' %>) *</label>
                            <input type="number" class="form-control" name="carton_price" step="0.01" required>
                        </div>

                        <!-- عدد الحبات في الطرد -->
                        <div class="col-md-4">
                            <label class="form-label">عدد الحبات في الطرد *</label>
                            <input type="number" class="form-control" name="pieces_per_package" required>
                        </div>

                        <!-- ثمن الطبلية -->
                        <div class="col-md-4">
                            <label class="form-label">ثمن الطبلية (<%= defaultCurrency ? defaultCurrency.symbol : '$' %>) *</label>
                            <input type="number" class="form-control" name="pallet_price" step="0.01" required>
                        </div>

                        <!-- عدد الطرود في الطبلية -->
                        <div class="col-md-4">
                            <label class="form-label">عدد الطرود في الطبلية *</label>
                            <input type="number" class="form-control" name="packages_per_pallet" value="1" required>
                        </div>
                    </div>

                    <!-- نتائج الحساب -->
                    <div class="row mt-4">
                        <div class="col-md-6">
                            <div class="alert alert-info">
                                <h6><i class="bi bi-calculator"></i> نتائج الحساب التلقائي:</h6>
                                <div class="row">
                                    <div class="col-6">
                                        <strong>كلفة القطعة الواحدة:</strong>
                                        <span id="unitCostResult"><%= (defaultCurrency && defaultCurrency.code === 'SYP') ? '0' : '0.00' %> <%= defaultCurrency ? defaultCurrency.symbol : '$' %></span>
                                    </div>
                                    <div class="col-6">
                                        <strong>كلفة الطرد:</strong>
                                        <span id="packageCostResult"><%= (defaultCurrency && defaultCurrency.code === 'SYP') ? '0' : '0.00' %> <%= defaultCurrency ? defaultCurrency.symbol : '$' %></span>
                                    </div>
                                <div class="col-12 mt-2">
                                    <strong>وزن الطرد القائم:</strong>
                                    <span id="grossPackageWeightResult">0.000 كجم</span>
                                </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 d-flex align-items-end">
                            <button type="submit" class="btn btn-primary w-100">
                                <i class="bi bi-save me-1"></i> حفظ المادة
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- حقول الأوزان الإضافية (إضافة متعددة) -->
<template id="extraWeightRowTemplate">
  <div class="row g-2 extra-weight-row align-items-end mt-1">
    <div class="col-md-6">
      <label class="form-label">اسم المادة الإضافية</label>
      <input type="text" class="form-control extra-weight-name" placeholder="مثال: فواصل، سيلفا ...">
    </div>
    <div class="col-md-4">
      <label class="form-label">وزنها (كجم)</label>
      <input type="number" step="0.001" class="form-control extra-weight-value" placeholder="0.000">
    </div>
    <div class="col-md-2">
      <button type="button" class="btn btn-outline-danger w-100 remove-extra">حذف</button>
    </div>
  </div>
  </template>

<!-- Modal تعديل المادة -->
<div class="modal fade" id="editMaterialModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">تعديل المادة</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="إغلاق"></button>
            </div>
            <div class="modal-body">
                <form id="editMaterialForm">
                    <input type="hidden" id="editMaterialId" name="material_id">
                    <div class="row g-3">
                        <!-- نوع المادة -->
                        <div class="col-md-6">
                            <label class="form-label">نوع المادة *</label>
                            <input type="text" class="form-control" id="editMaterialType" name="material_type" required>
                        </div>

                        <!-- اسم المادة -->
                        <div class="col-md-6">
                            <label class="form-label">اسم المادة *</label>
                            <input type="text" class="form-control" id="editMaterialName" name="material_name" required>
                        </div>

                        <!-- طريقة الحساب -->
                        <div class="col-12">
                            <label class="form-label">طريقة حساب التكلفة *</label>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="edit_calculation_method" id="editTraditionalMethod" value="traditional" checked onchange="toggleEditCalculationMethod()">
                                        <label class="form-check-label" for="editTraditionalMethod">
                                            <strong>الطريقة التقليدية</strong>
                                            <small class="d-block text-muted">إدخال السعر والوزن الإجمالي مباشرة</small>
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="edit_calculation_method" id="editComponentsMethod" value="components" onchange="toggleEditCalculationMethod()">
                                        <label class="form-check-label" for="editComponentsMethod">
                                            <strong>الحساب بالعناصر الفرعية</strong>
                                            <small class="d-block text-muted">تحديد مكونات المادة بالتفصيل</small>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- الطريقة التقليدية -->
                        <div id="editTraditionalFields" class="col-12">
                            <div class="row g-3">
                        <!-- السعر قبل الهدر (سعر كلي) -->
                                <div class="col-md-6">
                            <label class="form-label">السعر قبل الهدر (إجمالي) <%= defaultCurrency ? defaultCurrency.symbol : '$' %> *</label>
                                    <input type="number" class="form-control currency-input" id="editPriceBeforeWaste" name="price_before_waste" step="0.01" data-field="price_before_waste">
                            <small class="text-muted">أدخل السعر الكلي، وسيتم احتساب سعر الكيلو تلقائياً</small>
                        </div>

                        <!-- الوزن الجمالي -->
                                <div class="col-md-6">
                            <label class="form-label">الوزن الجمالي (كجم) *</label>
                                    <input type="number" class="form-control" id="editGrossWeight" name="gross_weight" step="0.01">
                                </div>
                            </div>
                        </div>

                        <!-- الحساب بالعناصر الفرعية -->
                        <div id="editComponentsFields" class="col-12" style="display: none;">
                            <div class="card border-info">
                                <div class="card-header bg-light">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0"><i class="bi bi-puzzle"></i> العناصر الفرعية للمادة</h6>
                                        <button type="button" class="btn btn-outline-primary btn-sm" onclick="addEditComponentRow()">
                                            <i class="bi bi-plus"></i> إضافة عنصر
                                        </button>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-bordered" id="editComponentsTable">
                                            <thead>
                                                <tr>
                                                    <th style="width: 35%;">اسم العنصر *</th>
                                                    <th style="width: 20%;">الوزن (غرام) *</th>
                                                    <th style="width: 25%;">سعر الكيلو (<%= defaultCurrency ? defaultCurrency.symbol : '$' %>) *</th>
                                                    <th style="width: 15%;">التكلفة</th>
                                                    <th style="width: 5%;">الإجراءات</th>
                                                </tr>
                                            </thead>
                                            <tbody id="editComponentsTableBody">
                                                <!-- سيتم إضافة الصفوف ديناميكياً -->
                                            </tbody>
                                            <tfoot>
                                                <tr class="table-info">
                                                    <th>المجموع</th>
                                                    <th id="editTotalWeightGrams">0 غ</th>
                                                    <th id="editAvgPricePerKg">0.00 <%= defaultCurrency ? defaultCurrency.symbol : '$' %></th>
                                                    <th id="editTotalComponentsCost">0.00 <%= defaultCurrency ? defaultCurrency.symbol : '$' %></th>
                                                    <th></th>
                                                </tr>
                                                <tr class="table-success">
                                                    <th colspan="2">الوزن الإجمالي: <span id="editCalculatedTotalWeight">0.000 كجم</span></th>
                                                    <th colspan="3">السعر الإجمالي: <span id="editCalculatedTotalPrice">0.00 <%= defaultCurrency ? defaultCurrency.symbol : '$' %></span></th>
                                                </tr>
                                            </tfoot>
                                        </table>
                                    </div>
                                    <div class="alert alert-info mt-3">
                                        <small>
                                            <i class="bi bi-info-circle"></i>
                                            <strong>ملاحظة:</strong> سيتم حساب الوزن الإجمالي والسعر الإجمالي تلقائياً من مجموع العناصر المضافة.
                                            سعر الكيلو النهائي = السعر الإجمالي ÷ الوزن الإجمالي
                                        </small>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- نسبة الهدر -->
                        <div class="col-md-4">
                            <label class="form-label">نسبة الهدر (%) *</label>
                            <input type="number" class="form-control" id="editWastePercentage" name="waste_percentage" step="0.01" required>
                        </div>

                        <!-- وحدة التعبئة -->
                        <div class="col-md-4">
                            <label class="form-label">وحدة التعبئة *</label>
                            <input type="text" class="form-control" id="editPackagingUnit" name="packaging_unit" required>
                        </div>

                        <!-- وزن المادة (داخل العبوة) -->
                        <div class="col-md-4">
                            <label class="form-label">وزن المادة (كجم) *</label>
                            <input type="number" class="form-control" id="editPackagingWeight" name="packaging_weight" step="0.001" required>
                        </div>
                        <!-- وزن وحدة التعبئة (العبوة الفارغة) -->
                        <div class="col-md-4">
                            <label class="form-label">وزن وحدة التعبئة (كجم) *</label>
                            <input type="number" class="form-control" id="editPackagingUnitWeight" name="packaging_unit_weight" step="0.001" required>
                        </div>

                        <!-- ثمن العبوة الفارغة -->
                        <div class="col-md-4">
                            <label class="form-label">ثمن العبوة الفارغة (<%= defaultCurrency ? defaultCurrency.symbol : '$' %>) *</label>
                            <input type="number" class="form-control currency-input" id="editEmptyPackagePrice" name="empty_package_price" step="0.01" required data-field="empty_package_price">
                        </div>

                        <!-- ثمن اللصاقة -->
                        <div class="col-md-4">
                            <label class="form-label">ثمن اللصاقة (<%= defaultCurrency ? defaultCurrency.symbol : '$' %>) *</label>
                            <input type="number" class="form-control currency-input" id="editStickerPrice" name="sticker_price" step="0.01" required data-field="sticker_price">
                        </div>

                        <!-- مصاريف إضافية -->
                        <div class="col-md-4">
                            <label class="form-label">مصاريف إضافية (<%= defaultCurrency ? defaultCurrency.symbol : '$' %>) *</label>
                            <input type="number" class="form-control currency-input" id="editAdditionalExpenses" name="additional_expenses" step="0.01" required data-field="additional_expenses">
                        </div>

                        <!-- مصروف عمال -->
                        <div class="col-md-4">
                            <label class="form-label">مصروف عمال (<%= defaultCurrency ? defaultCurrency.symbol : '$' %>) *</label>
                            <input type="number" class="form-control currency-input" id="editLaborCost" name="labor_cost" step="0.01" required data-field="labor_cost">
                        </div>

                        <!-- مواد حافظة -->
                        <div class="col-md-4">
                            <label class="form-label">مواد حافظة (<%= defaultCurrency ? defaultCurrency.symbol : '$' %>) *</label>
                            <input type="number" class="form-control currency-input" id="editPreservativesCost" name="preservatives_cost" step="0.01" required data-field="preservatives_cost">
                        </div>

                        <!-- ثمن كرتونة -->
                        <div class="col-md-4">
                            <label class="form-label">ثمن كرتونة (<%= defaultCurrency ? defaultCurrency.symbol : '$' %>) *</label>
                            <input type="number" class="form-control currency-input" id="editCartonPrice" name="carton_price" step="0.01" required data-field="carton_price">
                        </div>

                        <!-- عدد الحبات في الطرد -->
                        <div class="col-md-4">
                            <label class="form-label">عدد الحبات في الطرد *</label>
                            <input type="number" class="form-control" id="editPiecesPerPackage" name="pieces_per_package" required>
                        </div>

                        <!-- ثمن الطبلية -->
                        <div class="col-md-4">
                            <label class="form-label">ثمن الطبلية (<%= defaultCurrency ? defaultCurrency.symbol : '$' %>) *</label>
                            <input type="number" class="form-control currency-input" id="editPalletPrice" name="pallet_price" step="0.01" required data-field="pallet_price">
                        </div>

                        <!-- عدد الطرود في الطبلية -->
                        <div class="col-md-4">
                            <label class="form-label">عدد الطرود في الطبلية *</label>
                            <input type="number" class="form-control" id="editPackagesPerPallet" name="packages_per_pallet" required>
                        </div>
                        <!-- أوزان إضافية (تعديل) -->
                        <div class="col-12">
                            <label class="form-label">أوزان إضافية</label>
                            <div id="editExtraWeightsContainer"></div>
                            <button type="button" class="btn btn-outline-secondary mt-2" id="editAddExtraWeightBtn">إضافة وزن إضافي</button>
                        </div>
                    </div>

                    <!-- نتائج الحساب -->
                        <div class="row mt-4">
                        <div class="col-md-6">
                            <div class="alert alert-info">
                                <h6><i class="bi bi-calculator"></i> نتائج الحساب التلقائي:</h6>
                                <div class="row">
                                    <div class="col-6">
                                        <strong>كلفة القطعة الواحدة:</strong>
                                        <span id="editUnitCostResult"><%= (defaultCurrency && defaultCurrency.code === 'SYP') ? '0' : '0.00' %> <%= defaultCurrency ? defaultCurrency.symbol : '$' %></span>
                                    </div>
                                    <div class="col-6">
                                        <strong>كلفة الطرد:</strong>
                                        <span id="editPackageCostResult"><%= (defaultCurrency && defaultCurrency.code === 'SYP') ? '0' : '0.00' %> <%= defaultCurrency ? defaultCurrency.symbol : '$' %></span>
                                    </div>
                                        <div class="col-12 mt-2">
                                            <strong>وزن الطرد القائم:</strong>
                                            <span id="editGrossPackageWeightResult">0.000 كجم</span>
                                        </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                <button type="button" class="btn btn-primary" onclick="saveMaterialEdit()">حفظ التعديلات</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal استعراض المادة -->
<div class="modal fade" id="viewMaterialModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">تفاصيل المادة</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="إغلاق"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6 class="text-primary mb-3">المعلومات الأساسية</h6>
                        <table class="table table-borderless">
                            <tr>
                                <td><strong>اسم المادة:</strong></td>
                                <td id="viewMaterialName">-</td>
                            </tr>
                            <tr>
                                <td><strong>نوع المادة:</strong></td>
                                <td id="viewMaterialType">-</td>
                            </tr>
                            <tr>
                                <td><strong>تاريخ الإضافة:</strong></td>
                                <td id="viewMaterialDate">-</td>
                            </tr>
                            <tr>
                                <td><strong>آخر تحديث:</strong></td>
                                <td id="viewMaterialUpdated">-</td>
                            </tr>
                        </table>
                    </div>
                    <div class="col-md-6">
                        <h6 class="text-success mb-3">نتائج الحساب</h6>
                        <table class="table table-borderless">
                            <tr>
                                <td><strong>كلفة القطعة الواحدة:</strong></td>
                                <td id="viewUnitCost" class="text-primary fw-bold">-</td>
                            </tr>
                            <tr>
                                <td><strong>كلفة الطرد:</strong></td>
                                <td id="viewPackageCost" class="text-success fw-bold">-</td>
                            </tr>
                        </table>
                    </div>
                </div>

                <hr>

                <div class="row">
                    <div class="col-md-6">
                        <h6 class="text-primary mb-3">بيانات التكلفة الأساسية</h6>
                        <table class="table table-borderless">
                            <tr>
                                <td><strong>السعر قبل الهدر:</strong></td>
                                <td id="viewPriceBeforeWaste">-</td>
                            </tr>
                            <tr>
                                <td><strong>الوزن الجمالي:</strong></td>
                                <td id="viewGrossWeight">-</td>
                            </tr>
                            <tr>
                                <td><strong>نسبة الهدر:</strong></td>
                                <td id="viewWastePercentage">-</td>
                            </tr>
                            <tr>
                                <td><strong>الوزن الصافي:</strong></td>
                                <td id="viewNetWeight">-</td>
                            </tr>
                        </table>
                    </div>
                    <div class="col-md-6">
                        <h6 class="text-primary mb-3">بيانات التعبئة</h6>
                        <table class="table table-borderless">
                            <tr>
                                <td><strong>وحدة التعبئة:</strong></td>
                                <td id="viewPackagingUnit">-</td>
                            </tr>
                            <tr>
                                <td><strong>وزن وحدة التعبئة:</strong></td>
                                <td id="viewPackagingWeight">-</td>
                            </tr>
                            <tr>
                                <td><strong>عدد الحبات في الطرد:</strong></td>
                                <td id="viewPiecesPerPackage">-</td>
                            </tr>
                            <tr>
                                <td><strong>عدد الطرود في الطبلية:</strong></td>
                                <td id="viewPackagesPerPallet">-</td>
                            </tr>
                        </table>
                    </div>
                </div>

                <hr>

                <div class="row">
                    <div class="col-md-6">
                        <h6 class="text-primary mb-3">تكاليف التعبئة</h6>
                        <table class="table table-borderless">
                            <tr>
                                <td><strong>ثمن العبوة الفارغة:</strong></td>
                                <td id="viewEmptyPackagePrice">-</td>
                            </tr>
                            <tr>
                                <td><strong>ثمن اللصاقة:</strong></td>
                                <td id="viewStickerPrice">-</td>
                            </tr>
                            <tr>
                                <td><strong>ثمن كرتونة:</strong></td>
                                <td id="viewCartonPrice">-</td>
                            </tr>
                            <tr>
                                <td><strong>ثمن الطبلية:</strong></td>
                                <td id="viewPalletPrice">-</td>
                            </tr>
                        </table>
                    </div>
                    <div class="col-md-6">
                        <h6 class="text-primary mb-3">تكاليف إضافية</h6>
                        <table class="table table-borderless">
                            <tr>
                                <td><strong>مصاريف إضافية:</strong></td>
                                <td id="viewAdditionalExpenses">-</td>
                            </tr>
                            <tr>
                                <td><strong>مصروف عمال:</strong></td>
                                <td id="viewLaborCost">-</td>
                            </tr>
                            <tr>
                                <td><strong>مواد حافظة:</strong></td>
                                <td id="viewPreservativesCost">-</td>
                            </tr>
                        </table>
                    </div>
                </div>

                <!-- سجل التكاليف -->
                <hr>
                <div class="row">
                    <div class="col-12">
                        <h6 class="text-dark mb-3">سجل التكاليف</h6>
                        <div class="table-responsive">
                            <table class="table table-sm table-striped" id="costLogsTable">
                                <thead>
                                    <tr>
                                        <th>التاريخ</th>
                                        <th>كلفة القطعة</th>
                                        <th>كلفة الطرد</th>
                                    </tr>
                                </thead>
                                <tbody id="costLogsBody">
                                    <!-- سيتم ملؤها بالبيانات -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
                <button type="button" class="btn btn-primary" onclick="printMaterialDetails()">
                    <i class="bi bi-printer"></i> طباعة
                </button>
                <button type="button" class="btn btn-success" id="exportMaterialPdfBtn">
                    <i class="bi bi-file-earmark-pdf"></i> تصدير PDF
                </button>
            </div>
            <!-- PDF Export Modal -->
            <div id="materialPdfExportModal" class="modal fade" tabindex="-1" aria-hidden="true">
              <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-file-earmark-pdf me-2 text-success"></i> تم إنشاء ملف PDF</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="إغلاق"></button>
                  </div>
                  <div class="modal-body text-center">
                    <div class="mb-3">
                      <input type="text" id="materialPdfLinkInput" class="form-control text-center" readonly style="direction:ltr; font-size:0.95em;" />
                    </div>
                    <div class="d-flex justify-content-center gap-2 mb-2">
                      <button id="copyMaterialPdfLinkBtn" class="btn btn-outline-primary btn-sm"><i class="bi bi-clipboard me-1"></i> نسخ الرابط</button>
                      <a id="openMaterialPdfLinkBtn" class="btn btn-outline-info btn-sm" target="_blank"><i class="bi bi-box-arrow-up-right me-1"></i> فتح الرابط</a>
                      <a id="whatsappMaterialShareBtn" class="btn btn-outline-success btn-sm" target="_blank"><i class="bi bi-whatsapp me-1"></i> ارسال عبر واتساب</a>
                    </div>
                    <div class="alert alert-success py-2 mb-0">يمكنك مشاركة الرابط مع أي شخص لتحميل تفاصيل المادة مباشرة</div>
                  </div>
                </div>
              </div>
            </div>
        </div>
    </div>
</div>

<script>
// تحسين إمكانية الوصول للمودالات
document.addEventListener('DOMContentLoaded', function() {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        // إزالة aria-hidden من جميع المودالات لمنع تضارب التركيز
        modal.removeAttribute('aria-hidden');
        
        // إضافة inert attribute بدلاً من aria-hidden
        modal.addEventListener('show.bs.modal', function() {
            this.removeAttribute('inert');
        });
        
        modal.addEventListener('hidden.bs.modal', function() {
            this.setAttribute('inert', '');
            // إزالة backdrop المعلق
            const backdrops = document.querySelectorAll('.modal-backdrop');
            backdrops.forEach(backdrop => {
                backdrop.remove();
            });
            // إزالة overflow: hidden من body
            document.body.classList.remove('modal-open');
            document.body.style.overflow = '';
            document.body.style.paddingRight = '';
        });
        
        modal.addEventListener('shown.bs.modal', function() {
            // التركيز على أول عنصر قابل للتركيز بعد فتح المودال
            setTimeout(() => {
                const firstFocusable = this.querySelector('input:not([readonly]):not([disabled]), button:not([disabled]), select:not([disabled]), textarea:not([readonly]):not([disabled])');
                if (firstFocusable) {
                    firstFocusable.focus();
                }
            }, 100);
        });
        
        // منع Bootstrap من إضافة aria-hidden باستخدام MutationObserver أكثر فعالية
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.type === 'attributes' && mutation.attributeName === 'aria-hidden') {
                    // إزالة aria-hidden فوراً
                    modal.removeAttribute('aria-hidden');
                    // إضافة inert بدلاً منه إذا كان المودال مخفي
                    if (!modal.classList.contains('show')) {
                        modal.setAttribute('inert', '');
                    }
                }
            });
        });
        
        observer.observe(modal, {
            attributes: true,
            attributeFilter: ['aria-hidden']
        });
        
        // إضافة inert للمودالات المخفية عند التحميل
        if (!modal.classList.contains('show')) {
            modal.setAttribute('inert', '');
        }
    });
    
    // إضافة مستمع عام لإزالة backdrop المعلق
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal-backdrop')) {
            e.target.remove();
            document.body.classList.remove('modal-open');
            document.body.style.overflow = '';
            document.body.style.paddingRight = '';
        }
    });
    
    // إزالة backdrop المعلق عند تحميل الصفحة
    const stuckBackdrops = document.querySelectorAll('.modal-backdrop');
    stuckBackdrops.forEach(backdrop => {
        backdrop.remove();
    });
    document.body.classList.remove('modal-open');
    document.body.style.overflow = '';
    document.body.style.paddingRight = '';
});

// دالة تعديل المادة
function editMaterial(materialId) {
    // جلب بيانات المادة
    fetch(`/costs/cost-statement/${materialId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const material = data.material;
                
                // ملء النموذج بالبيانات
                document.getElementById('editMaterialId').value = material.id;
                document.getElementById('editMaterialType').value = material.material_type;
                document.getElementById('editMaterialName').value = material.material_name;
                document.getElementById('editGrossWeight').value = material.gross_weight;
                document.getElementById('editWastePercentage').value = material.waste_percentage;
                document.getElementById('editPackagingUnit').value = material.packaging_unit;
                document.getElementById('editPackagingWeight').value = material.packaging_weight;
                document.getElementById('editPiecesPerPackage').value = material.pieces_per_package;
                document.getElementById('editPackagesPerPallet').value = material.packages_per_pallet;
                
                // تحديد طريقة الحساب
                const calculationMethod = material.calculation_method || 'traditional';
                if (calculationMethod === 'components') {
                    document.getElementById('editComponentsMethod').checked = true;
                    document.getElementById('editTraditionalMethod').checked = false;
                } else {
                    document.getElementById('editTraditionalMethod').checked = true;
                    document.getElementById('editComponentsMethod').checked = false;
                }
                
                // تبديل العرض حسب طريقة الحساب
                toggleEditCalculationMethod();
                
                // ملء حقول العملة حسب العملة المحددة
                const currentCurrency = '<%= defaultCurrency ? defaultCurrency.code : "USD" %>';
                if (currentCurrency === 'SYP') {
                    document.getElementById('editPriceBeforeWaste').value = material.price_before_waste_syp || material.price_before_waste;
                    document.getElementById('editEmptyPackagePrice').value = material.empty_package_price_syp || material.empty_package_price;
                    document.getElementById('editStickerPrice').value = material.sticker_price_syp || material.sticker_price;
                    document.getElementById('editAdditionalExpenses').value = material.additional_expenses_syp || material.additional_expenses;
                    document.getElementById('editLaborCost').value = material.labor_cost_syp || material.labor_cost;
                    document.getElementById('editPreservativesCost').value = material.preservatives_cost_syp || material.preservatives_cost;
                    document.getElementById('editCartonPrice').value = material.carton_price_syp || material.carton_price;
                    document.getElementById('editPalletPrice').value = material.pallet_price_syp || material.pallet_price;
                } else {
                    document.getElementById('editPriceBeforeWaste').value = material.price_before_waste;
                    document.getElementById('editEmptyPackagePrice').value = material.empty_package_price;
                    document.getElementById('editStickerPrice').value = material.sticker_price;
                    document.getElementById('editAdditionalExpenses').value = material.additional_expenses;
                    document.getElementById('editLaborCost').value = material.labor_cost;
                    document.getElementById('editPreservativesCost').value = material.preservatives_cost;
                    document.getElementById('editCartonPrice').value = material.carton_price;
                    document.getElementById('editPalletPrice').value = material.pallet_price;
                }
                // وزن العبوة الفارغة
                document.getElementById('editPackagingUnitWeight').value = material.packaging_unit_weight || '';

                // ملء الأوزان الإضافية
                try {
                    // تعبئة الأوزان الإضافية في مودال التعديل
                    const container = document.getElementById('editExtraWeightsContainer');
                    if (container) {
                        container.innerHTML = '';
                        let extras = [];
                        if (typeof material.extra_weights === 'string') {
                            extras = JSON.parse(material.extra_weights || '[]');
                        } else {
                            extras = material.extra_weights || [];
                        }
                        if (Array.isArray(extras)) {
                            extras.forEach(ew => {
                                const tpl = document.getElementById('extraWeightRowTemplate');
                                if (tpl) {
                                    const clone = tpl.content.cloneNode(true);
                                    const row = clone.querySelector('.extra-weight-row');
                                    row.querySelector('.extra-weight-name').value = ew.name || '';
                                    row.querySelector('.extra-weight-value').value = (parseFloat(ew.weight) || 0).toFixed(3);
                                    row.querySelector('.remove-extra').addEventListener('click', function(){
                                        row.remove();
                                        calculateEditCosts();
                                    });
                                    row.querySelectorAll('input').forEach(inp=>inp.addEventListener('input', calculateEditCosts));
                                    container.appendChild(clone);
                                }
                            });
                        }
                    }
                } catch(e) {}
                
                // تحميل العناصر الفرعية إذا كانت الطريقة هي العناصر
                if (calculationMethod === 'components') {
                    loadEditMaterialComponents(material.id);
                }
                
                // حساب التكاليف
                calculateEditCosts();
                
                // فتح Modal
                const modal = new bootstrap.Modal(document.getElementById('editMaterialModal'));
                modal.show();
            } else {
                showAlert(data.message || 'حدث خطأ في جلب بيانات المادة', 'error');
            }
        })
        .catch(error => {
            showAlert('حدث خطأ في جلب بيانات المادة', 'error');
        });
}

// إدارة العناصر الفرعية
let componentRowCounter = 0;

// تبديل طريقة الحساب
function toggleCalculationMethod() {
    const traditionalFields = document.getElementById('traditionalFields');
    const componentsFields = document.getElementById('componentsFields');
    const traditionalMethod = document.getElementById('traditionalMethod');
    const componentsMethod = document.getElementById('componentsMethod');
    
    // تحديث required attributes
    const traditionalInputs = traditionalFields.querySelectorAll('input');
    const componentsInputs = componentsFields.querySelectorAll('input');
    
    if (traditionalMethod.checked) {
        traditionalFields.style.display = 'block';
        componentsFields.style.display = 'none';
        
        // جعل الحقول التقليدية مطلوبة
        traditionalInputs.forEach(input => input.setAttribute('required', 'required'));
        componentsInputs.forEach(input => input.removeAttribute('required'));
    } else if (componentsMethod.checked) {
        traditionalFields.style.display = 'none';
        componentsFields.style.display = 'block';
        
        // جعل حقول العناصر مطلوبة
        traditionalInputs.forEach(input => input.removeAttribute('required'));
        
        // إضافة صف افتراضي للعناصر إذا لم يكن موجود
        if (document.getElementById('componentsTableBody').children.length === 0) {
            addComponentRow();
        }
    }
    
    // إعادة حساب التكاليف
    calculateCosts();
}

// إضافة صف عنصر جديد
function addComponentRow() {
    const tbody = document.getElementById('componentsTableBody');
    const rowId = ++componentRowCounter;
    
    const row = document.createElement('tr');
    row.setAttribute('data-component-id', rowId);
    row.innerHTML = `
        <td>
            <input type="text" class="form-control component-name" placeholder="مثال: زيتون أخضر" required>
        </td>
        <td>
            <input type="number" class="form-control component-weight" step="0.1" min="0" placeholder="0" onchange="calculateComponentCost(${rowId})" required>
        </td>
        <td>
            <input type="number" class="form-control component-price" step="0.01" min="0" placeholder="0.00" onchange="calculateComponentCost(${rowId})" required>
        </td>
        <td>
            <input type="number" class="form-control component-cost" readonly>
        </td>
        <td>
            <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeComponentRow(${rowId})" title="حذف العنصر">
                <i class="bi bi-trash"></i>
            </button>
        </td>
    `;
    
    tbody.appendChild(row);
    
    // إعادة حساب المجاميع
    calculateComponentsTotals();
}

// حذف صف عنصر
function removeComponentRow(rowId) {
    const row = document.querySelector(`tr[data-component-id="${rowId}"]`);
    if (row) {
        row.remove();
        calculateComponentsTotals();
    }
}

// حساب تكلفة عنصر واحد
function calculateComponentCost(rowId) {
    const row = document.querySelector(`tr[data-component-id="${rowId}"]`);
    if (!row) return;
    
    const weight = parseFloat(row.querySelector('.component-weight').value) || 0;
    const price = parseFloat(row.querySelector('.component-price').value) || 0;
    const cost = (weight / 1000) * price; // تحويل من غرام إلى كيلو
    
    row.querySelector('.component-cost').value = cost.toFixed(4);
    
    // إعادة حساب المجاميع
    calculateComponentsTotals();
}

// حساب مجاميع العناصر
function calculateComponentsTotals() {
    const rows = document.querySelectorAll('#componentsTableBody tr');
    let totalWeight = 0;
    let totalCost = 0;
    let validRows = 0;
    
    rows.forEach(row => {
        const weight = parseFloat(row.querySelector('.component-weight').value) || 0;
        const cost = parseFloat(row.querySelector('.component-cost').value) || 0;
        
        if (weight > 0) {
            totalWeight += weight;
            totalCost += cost;
            validRows++;
        }
    });
    
    // تحديث المجاميع في الجدول
    document.getElementById('totalWeightGrams').textContent = `${totalWeight.toFixed(1)} غ`;
    document.getElementById('totalComponentsCost').textContent = `${totalCost.toFixed(4)} <%= defaultCurrency ? defaultCurrency.symbol : '$' %>`;
    
    // حساب متوسط السعر
    const avgPrice = totalWeight > 0 ? (totalCost / (totalWeight / 1000)) : 0;
    document.getElementById('avgPricePerKg').textContent = `${avgPrice.toFixed(2)} <%= defaultCurrency ? defaultCurrency.symbol : '$' %>`;
    
    // تحديث الوزن والسعر الإجماليين
    const totalWeightKg = totalWeight / 1000;
    document.getElementById('calculatedTotalWeight').textContent = `${totalWeightKg.toFixed(3)} كجم`;
    document.getElementById('calculatedTotalPrice').textContent = `${totalCost.toFixed(4)} <%= defaultCurrency ? defaultCurrency.symbol : '$' %>`;
    
    // تحديث الحقول المخفية للإرسال
    updateHiddenComponentsFields(totalWeightKg, totalCost);
    
    // إعادة حساب التكاليف الإجمالية
    calculateCosts();
}

// تحديث الحقول المخفية للإرسال
function updateHiddenComponentsFields(totalWeight, totalPrice) {
    // تحديث أو إنشاء حقول مخفية للوزن والسعر المحسوبين
    let weightField = document.querySelector('input[name="calculated_gross_weight"]');
    let priceField = document.querySelector('input[name="calculated_price_before_waste"]');
    
    if (!weightField) {
        weightField = document.createElement('input');
        weightField.type = 'hidden';
        weightField.name = 'calculated_gross_weight';
        document.getElementById('materialForm').appendChild(weightField);
    }
    
    if (!priceField) {
        priceField = document.createElement('input');
        priceField.type = 'hidden';
        priceField.name = 'calculated_price_before_waste';
        document.getElementById('materialForm').appendChild(priceField);
    }
    
    weightField.value = totalWeight.toFixed(3);
    priceField.value = totalPrice.toFixed(4);
}

// جمع بيانات العناصر للإرسال
function getComponentsData() {
    const components = [];
    const rows = document.querySelectorAll('#componentsTableBody tr');
    
    rows.forEach(row => {
        const name = row.querySelector('.component-name').value.trim();
        const weight = parseFloat(row.querySelector('.component-weight').value) || 0;
        const price = parseFloat(row.querySelector('.component-price').value) || 0;
        
        if (name && weight > 0 && price > 0) {
            components.push({
                component_name: name,
                weight_grams: weight,
                price_per_kg: price
            });
        }
    });
    
    return components;
}

// إدارة العناصر الفرعية في مودال التعديل
let editComponentRowCounter = 0;

// تبديل طريقة الحساب في التعديل
function toggleEditCalculationMethod() {
    const traditionalFields = document.getElementById('editTraditionalFields');
    const componentsFields = document.getElementById('editComponentsFields');
    const traditionalMethod = document.getElementById('editTraditionalMethod');
    const componentsMethod = document.getElementById('editComponentsMethod');
    
    // تحديث required attributes
    const traditionalInputs = traditionalFields.querySelectorAll('input');
    const componentsInputs = componentsFields.querySelectorAll('input');
    
    if (traditionalMethod.checked) {
        traditionalFields.style.display = 'block';
        componentsFields.style.display = 'none';
        
        // جعل الحقول التقليدية مطلوبة
        traditionalInputs.forEach(input => input.setAttribute('required', 'required'));
        componentsInputs.forEach(input => input.removeAttribute('required'));
    } else if (componentsMethod.checked) {
        traditionalFields.style.display = 'none';
        componentsFields.style.display = 'block';
        
        // جعل حقول العناصر مطلوبة
        traditionalInputs.forEach(input => input.removeAttribute('required'));
        
        // إضافة صف افتراضي للعناصر إذا لم يكن موجود
        if (document.getElementById('editComponentsTableBody').children.length === 0) {
            addEditComponentRow();
        }
    }
    
    // إعادة حساب التكاليف
    calculateEditCosts();
}

// إضافة صف عنصر جديد في التعديل
function addEditComponentRow() {
    const tbody = document.getElementById('editComponentsTableBody');
    const rowId = ++editComponentRowCounter;
    
    const row = document.createElement('tr');
    row.setAttribute('data-edit-component-id', rowId);
    row.innerHTML = `
        <td>
            <input type="text" class="form-control edit-component-name" placeholder="مثال: زيتون أخضر" required>
        </td>
        <td>
            <input type="number" class="form-control edit-component-weight" step="0.1" min="0" placeholder="0" onchange="calculateEditComponentCost(${rowId})" required>
        </td>
        <td>
            <input type="number" class="form-control edit-component-price" step="0.01" min="0" placeholder="0.00" onchange="calculateEditComponentCost(${rowId})" required>
        </td>
        <td>
            <input type="number" class="form-control edit-component-cost" readonly>
        </td>
        <td>
            <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeEditComponentRow(${rowId})" title="حذف العنصر">
                <i class="bi bi-trash"></i>
            </button>
        </td>
    `;
    
    tbody.appendChild(row);
    
    // إعادة حساب المجاميع
    calculateEditComponentsTotals();
}

// حذف صف عنصر في التعديل
function removeEditComponentRow(rowId) {
    const row = document.querySelector(`tr[data-edit-component-id="${rowId}"]`);
    if (row) {
        row.remove();
        calculateEditComponentsTotals();
    }
}

// حساب تكلفة عنصر واحد في التعديل
function calculateEditComponentCost(rowId) {
    const row = document.querySelector(`tr[data-edit-component-id="${rowId}"]`);
    if (!row) return;
    
    const weight = parseFloat(row.querySelector('.edit-component-weight').value) || 0;
    const price = parseFloat(row.querySelector('.edit-component-price').value) || 0;
    const cost = (weight / 1000) * price; // تحويل من غرام إلى كيلو
    
    row.querySelector('.edit-component-cost').value = cost.toFixed(4);
    
    // إعادة حساب المجاميع
    calculateEditComponentsTotals();
}

// حساب مجاميع العناصر في التعديل
function calculateEditComponentsTotals() {
    const rows = document.querySelectorAll('#editComponentsTableBody tr');
    let totalWeight = 0;
    let totalCost = 0;
    let validRows = 0;
    
    rows.forEach(row => {
        const weight = parseFloat(row.querySelector('.edit-component-weight').value) || 0;
        const cost = parseFloat(row.querySelector('.edit-component-cost').value) || 0;
        
        if (weight > 0) {
            totalWeight += weight;
            totalCost += cost;
            validRows++;
        }
    });
    
    // تحديث المجاميع في الجدول
    document.getElementById('editTotalWeightGrams').textContent = `${totalWeight.toFixed(1)} غ`;
    document.getElementById('editTotalComponentsCost').textContent = `${totalCost.toFixed(4)} <%= defaultCurrency ? defaultCurrency.symbol : '$' %>`;
    
    // حساب متوسط السعر
    const avgPrice = totalWeight > 0 ? (totalCost / (totalWeight / 1000)) : 0;
    document.getElementById('editAvgPricePerKg').textContent = `${avgPrice.toFixed(2)} <%= defaultCurrency ? defaultCurrency.symbol : '$' %>`;
    
    // تحديث الوزن والسعر الإجماليين
    const totalWeightKg = totalWeight / 1000;
    document.getElementById('editCalculatedTotalWeight').textContent = `${totalWeightKg.toFixed(3)} كجم`;
    document.getElementById('editCalculatedTotalPrice').textContent = `${totalCost.toFixed(4)} <%= defaultCurrency ? defaultCurrency.symbol : '$' %>`;
    
    // تحديث الحقول المخفية للإرسال
    updateEditHiddenComponentsFields(totalWeightKg, totalCost);
    
    // إعادة حساب التكاليف الإجمالية
    calculateEditCosts();
}

// تحديث الحقول المخفية للإرسال في التعديل
function updateEditHiddenComponentsFields(totalWeight, totalPrice) {
    // تحديث أو إنشاء حقول مخفية للوزن والسعر المحسوبين
    let weightField = document.querySelector('input[name="edit_calculated_gross_weight"]');
    let priceField = document.querySelector('input[name="edit_calculated_price_before_waste"]');
    
    if (!weightField) {
        weightField = document.createElement('input');
        weightField.type = 'hidden';
        weightField.name = 'edit_calculated_gross_weight';
        document.getElementById('editMaterialForm').appendChild(weightField);
    }
    
    if (!priceField) {
        priceField = document.createElement('input');
        priceField.type = 'hidden';
        priceField.name = 'edit_calculated_price_before_waste';
        document.getElementById('editMaterialForm').appendChild(priceField);
    }
    
    weightField.value = totalWeight.toFixed(3);
    priceField.value = totalPrice.toFixed(4);
}

// جمع بيانات العناصر للإرسال في التعديل
function getEditComponentsData() {
    const components = [];
    const rows = document.querySelectorAll('#editComponentsTableBody tr');
    
    rows.forEach(row => {
        const name = row.querySelector('.edit-component-name').value.trim();
        const weight = parseFloat(row.querySelector('.edit-component-weight').value) || 0;
        const price = parseFloat(row.querySelector('.edit-component-price').value) || 0;
        
        if (name && weight > 0 && price > 0) {
            components.push({
                component_name: name,
                weight_grams: weight,
                price_per_kg: price
            });
        }
    });
    
    return components;
}

// تحميل العناصر الفرعية للمادة في التعديل
function loadEditMaterialComponents(materialId) {
    fetch(`/costs/cost-statement/${materialId}/components`)
        .then(response => response.json())
        .then(data => {
            if (data.success && data.components) {
                // مسح الجدول أولاً
                document.getElementById('editComponentsTableBody').innerHTML = '';
                editComponentRowCounter = 0;
                
                // إضافة العناصر
                data.components.forEach(component => {
                    addEditComponentRow();
                    const lastRow = document.querySelector('#editComponentsTableBody tr:last-child');
                    if (lastRow) {
                        lastRow.querySelector('.edit-component-name').value = component.component_name;
                        lastRow.querySelector('.edit-component-weight').value = component.weight_grams;
                        
                        // تحديد السعر حسب العملة الحالية
                        const currentCurrency = '<%= defaultCurrency ? defaultCurrency.code : "USD" %>';
                        const price = currentCurrency === 'SYP' ? (component.price_per_kg_syp || component.price_per_kg) : component.price_per_kg;
                        lastRow.querySelector('.edit-component-price').value = price;
                        
                        // حساب التكلفة
                        const rowId = lastRow.getAttribute('data-edit-component-id');
                        calculateEditComponentCost(parseInt(rowId));
                    }
                });
                
                // إعادة حساب المجاميع
                calculateEditComponentsTotals();
            }
        })
        .catch(error => {
            console.error('خطأ في تحميل العناصر الفرعية:', error);
        });
}

// حساب التكاليف تلقائياً
function calculateCosts() {
    const currentCurrency = '<%= defaultCurrency ? defaultCurrency.code : "USD" %>';
    const exchangeRate = <%= exchangeRate %>;
    
    // تحديد طريقة الحساب
    const isComponentsMethod = document.getElementById('componentsMethod').checked;
    
    let priceBeforeWaste, grossWeight;
    
    if (isComponentsMethod) {
        // استخدام القيم المحسوبة من العناصر
        priceBeforeWaste = parseFloat(document.querySelector('input[name="calculated_price_before_waste"]')?.value) || 0;
        grossWeight = parseFloat(document.querySelector('input[name="calculated_gross_weight"]')?.value) || 0;
    } else {
        // استخدام القيم المدخلة يدوياً
        priceBeforeWaste = parseFloat(document.querySelector('input[name="price_before_waste"]').value) || 0;
        grossWeight = parseFloat(document.querySelector('input[name="gross_weight"]').value) || 0;
    }
    
    const wastePercentage = parseFloat(document.querySelector('input[name="waste_percentage"]').value) || 0;
    const emptyPackagePrice = parseFloat(document.querySelector('input[name="empty_package_price"]').value) || 0;
  const packagingUnitWeight = parseFloat(document.querySelector('input[name="packaging_unit_weight"]').value) || 0;
    const stickerPrice = parseFloat(document.querySelector('input[name="sticker_price"]').value) || 0;
    const additionalExpenses = parseFloat(document.querySelector('input[name="additional_expenses"]').value) || 0;
    const laborCost = parseFloat(document.querySelector('input[name="labor_cost"]').value) || 0;
    const preservativesCost = parseFloat(document.querySelector('input[name="preservatives_cost"]').value) || 0;
    const cartonPrice = parseFloat(document.querySelector('input[name="carton_price"]').value) || 0;
    const piecesPerPackage = parseInt(document.querySelector('input[name="pieces_per_package"]').value) || 1;
    const palletPrice = parseFloat(document.querySelector('input[name="pallet_price"]').value) || 0;
    const packagesPerPallet = parseInt(document.querySelector('input[name="packages_per_pallet"]').value) || 1;

    // حساب كلفة القطعة الواحدة
    const netWeight = grossWeight * (1 - wastePercentage / 100);
    const pricePerKgBeforeWaste = grossWeight > 0 ? (priceBeforeWaste / grossWeight) : 0;
    const pricePerKgAfterWaste = pricePerKgBeforeWaste / (1 - wastePercentage / 100 || 1);
  const packagingWeight = parseFloat(document.querySelector('input[name="packaging_weight"]').value) || 0; // وزن المادة
    const materialCostInUnit = pricePerKgAfterWaste * packagingWeight;
    const totalPackagingCosts = emptyPackagePrice + stickerPrice + additionalExpenses + laborCost + preservativesCost;
    const unitCost = materialCostInUnit + totalPackagingCosts;

    // حساب كلفة الطرد وفق الصيغة المطلوبة
    // (كلفة القطعة الواحدة * عدد الحبات بالطرد) + ثمن الكرتونة + (ثمن الطبلية ÷ عدد الطرود بالطبلية)
  const palletShare = palletPrice / packagesPerPallet;
  const packageCost = (unitCost * piecesPerPackage) + cartonPrice + palletShare;

  // حساب وزن الطرد القائم: ((وزن وحدة التعبئة + وزن المادة) * عدد الحبات في الطرد + الأوزان الإضافية)
  const extraWeightsTotal = Array.from(document.querySelectorAll('.extra-weight-row input.extra-weight-value'))
    .reduce((sum, el) => sum + (parseFloat(el.value) || 0), 0);
  const grossPackageWeight = ((packagingUnitWeight + packagingWeight) * piecesPerPackage) + extraWeightsTotal;

    // عرض النتائج
    const currencySymbol = '<%= defaultCurrency ? defaultCurrency.symbol : "$" %>';
    let unitCostUSD = unitCost;
    let packageCostUSD = packageCost;
    let unitCostSYP = unitCost;
    let packageCostSYP = packageCost;
    if (currentCurrency === 'SYP') {
        unitCostUSD = unitCost / exchangeRate;
        packageCostUSD = packageCost / exchangeRate;
    } else {
        unitCostSYP = unitCost * exchangeRate;
        packageCostSYP = packageCost * exchangeRate;
    }
    const formatUSD = (v) => v.toFixed(2);
    const formatSYP = (v) => String(Math.round(v));
    const unitMain = currentCurrency === 'SYP' ? formatSYP(unitCost) : formatUSD(unitCost);
    const packMain = currentCurrency === 'SYP' ? formatSYP(packageCost) : formatUSD(packageCost);
    document.getElementById('unitCostResult').textContent = `${unitMain} ${currencySymbol} ( ${formatUSD(unitCostUSD)} $ / ${formatSYP(unitCostSYP)} ل.س )`;
  document.getElementById('packageCostResult').textContent = `${packMain} ${currencySymbol} ( ${formatUSD(packageCostUSD)} $ / ${formatSYP(packageCostSYP)} ل.س )`;
  const grossEl = document.getElementById('grossPackageWeightResult');
  if (grossEl) grossEl.textContent = `${grossPackageWeight.toFixed(3)} كجم`;
}

// معالجة نموذج إضافة المادة
document.getElementById('materialForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const currentCurrency = '<%= defaultCurrency ? defaultCurrency.code : "USD" %>';
    const exchangeRate = <%= exchangeRate %>;

    // تحديد طريقة الحساب
    const calculationMethod = formData.get('calculation_method');
    const isComponentsMethod = calculationMethod === 'components';

    // تجهيز الحقول الرقمية غير المرتبطة بالعملة كما هي
    const bodyPayload = {
            material_type: formData.get('material_type'),
            material_name: formData.get('material_name'),
            calculation_method: calculationMethod,
            waste_percentage: formData.get('waste_percentage'),
            packaging_unit: formData.get('packaging_unit'),
            packaging_weight: formData.get('packaging_weight'),
            packaging_unit_weight: formData.get('packaging_unit_weight'),
            pieces_per_package: formData.get('pieces_per_package'),
            packages_per_pallet: formData.get('packages_per_pallet')
    };
    
    // إضافة الوزن والسعر حسب طريقة الحساب
    if (isComponentsMethod) {
        bodyPayload.gross_weight = formData.get('calculated_gross_weight');
        bodyPayload.components = getComponentsData();
        
        // التحقق من وجود عناصر
        if (!bodyPayload.components || bodyPayload.components.length === 0) {
            showAlert('يرجى إضافة عنصر واحد على الأقل للمادة', 'error');
            return;
        }
    } else {
        bodyPayload.gross_weight = formData.get('gross_weight');
    }

    // جمع الأوزان الإضافية
    const extraWeights = [];
    document.querySelectorAll('#extraWeightsContainer .extra-weight-row').forEach(row => {
        const name = row.querySelector('.extra-weight-name')?.value?.trim() || '';
        const val = parseFloat(row.querySelector('.extra-weight-value')?.value || '0') || 0;
        if (name || val > 0) extraWeights.push({ name, weight: val });
    });
    if (extraWeights.length) bodyPayload.extra_weights = extraWeights;

    // تحويل الحقول المرتبطة بالعملة إلى الدولار عند كون العملة الحالية ل.س
    let currencyFields = [
        'empty_package_price', 'sticker_price', 
        'additional_expenses', 'labor_cost', 'preservatives_cost', 
        'carton_price', 'pallet_price'
    ];
    
    // إضافة price_before_waste فقط للطريقة التقليدية
    if (!isComponentsMethod) {
        currencyFields.push('price_before_waste');
    } else {
        // للطريقة الجديدة، استخدم السعر المحسوب
        const calculatedPrice = parseFloat(formData.get('calculated_price_before_waste') || '0') || 0;
        if (currentCurrency === 'SYP') {
            bodyPayload.price_before_waste = (calculatedPrice / exchangeRate).toFixed(4);
        } else {
            bodyPayload.price_before_waste = calculatedPrice.toFixed(4);
        }
    }

    currencyFields.forEach((field) => {
        const raw = parseFloat(formData.get(field) || '0') || 0;
        if (currentCurrency === 'SYP') {
            bodyPayload[field] = (raw / exchangeRate).toFixed(2);
        } else {
            bodyPayload[field] = raw.toFixed(2);
        }
    });

    fetch('/costs/cost-statement', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(bodyPayload)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showAlert('تم حفظ المادة بنجاح', 'success');
            // إغلاق المودال
            const modal = bootstrap.Modal.getInstance(document.getElementById('addMaterialModal'));
            if (modal) {
                modal.hide();
            }
            setTimeout(() => window.location.reload(), 1500);
        } else {
            showAlert(data.message || 'حدث خطأ في حفظ المادة', 'error');
        }
    })
    .catch(error => {
        showAlert('حدث خطأ في حفظ المادة', 'error');
    });
});

// إضافة مستمعي الأحداث للحقول في مودال الإضافة
document.addEventListener('DOMContentLoaded', function() {
    const addMaterialInputs = document.querySelectorAll('#addMaterialModal input, #addMaterialModal select');
    addMaterialInputs.forEach(input => {
        input.addEventListener('input', calculateCosts);
    });
    // مراقبة الأوزان الإضافية
    document.getElementById('extraWeightsContainer')?.addEventListener('input', calculateCosts);
});

// إضافة مستمعي الأحداث لحقول التعديل
document.addEventListener('DOMContentLoaded', function() {
    const editFields = [
        'editPriceBeforeWaste', 'editGrossWeight', 'editWastePercentage',
        'editEmptyPackagePrice', 'editStickerPrice', 'editAdditionalExpenses',
        'editLaborCost', 'editPreservativesCost', 'editCartonPrice',
        'editPiecesPerPackage', 'editPalletPrice', 'editPackagesPerPallet',
        'editPackagingWeight', 'editPackagingUnitWeight'
    ];
    
    editFields.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        if (field) {
            field.addEventListener('input', calculateEditCosts);
        }
    });
    
    // تعيين القيم الافتراضية في نموذج الإضافة
    setupAddMaterialForm();
    
    // إعادة تعيين النموذج عند إغلاق المودال
    const addMaterialModal = document.getElementById('addMaterialModal');
    if (addMaterialModal) {
        addMaterialModal.addEventListener('hidden.bs.modal', function() {
            resetAddMaterialForm();
        });
    }

    // إدارة الأوزان الإضافية
    const addBtn = document.getElementById('addExtraWeightBtn');
    const container = document.getElementById('extraWeightsContainer');
    const tpl = document.getElementById('extraWeightRowTemplate');
    function bindRow(row){
      const removeBtn = row.querySelector('.remove-extra');
      if (removeBtn) removeBtn.addEventListener('click', function(){
        row.remove();
        calculateCosts();
      });
      row.querySelectorAll('input').forEach(inp=>inp.addEventListener('input', calculateCosts));
    }
    if (addBtn && container && tpl) {
      addBtn.addEventListener('click', function(){
        const clone = tpl.content.cloneNode(true);
        const row = clone.querySelector('.extra-weight-row');
        bindRow(row);
        container.appendChild(clone);
      });
    }

    // إدارة الأوزان الإضافية في مودال التعديل
    const editAddBtn = document.getElementById('editAddExtraWeightBtn');
    const editContainer = document.getElementById('editExtraWeightsContainer');
    function bindEditRow(row){
      const removeBtn = row.querySelector('.remove-extra');
      if (removeBtn) removeBtn.addEventListener('click', function(e){
        e.preventDefault();
        const container = document.getElementById('editExtraWeightsContainer');
        if (container && container.contains(row)) {
          container.removeChild(row);
        }
        calculateEditCosts();
      });
      row.querySelectorAll('input').forEach(inp=>inp.addEventListener('input', calculateEditCosts));
    }
    if (editAddBtn && editContainer && tpl) {
      editAddBtn.addEventListener('click', function(){
        const clone = tpl.content.cloneNode(true);
        const row = clone.querySelector('.extra-weight-row');
        // تأكد من ربط الأحداث قبل الإضافة
        bindEditRow(row);
        editContainer.appendChild(row);
        // Trigger recalculation after adding a new row
        calculateEditCosts();
      });
    }
});

// دالة إعداد نموذج إضافة المادة
function setupAddMaterialForm() {
    const materialTypeInput = document.querySelector('#addMaterialModal input[name="material_type"]');
    if (materialTypeInput && !materialTypeInput.value) {
        materialTypeInput.value = 'زيتون';
    }
    
    const packagingUnitInput = document.querySelector('#addMaterialModal input[name="packaging_unit"]');
    if (packagingUnitInput && !packagingUnitInput.value) {
        packagingUnitInput.value = 'سطل';
    }
}

// دالة إعادة تعيين نموذج إضافة المادة
function resetAddMaterialForm() {
    const form = document.getElementById('materialForm');
    if (form) {
        form.reset();
        setupAddMaterialForm();
        // إعادة تعيين نتائج الحساب
        document.getElementById('unitCostResult').textContent = '0.00 <%= defaultCurrency ? defaultCurrency.symbol : "$" %>';
        document.getElementById('packageCostResult').textContent = '0.00 <%= defaultCurrency ? defaultCurrency.symbol : "$" %>';
        const grossEl = document.getElementById('grossPackageWeightResult');
        if (grossEl) grossEl.textContent = '0.000 كجم';
        const cont = document.getElementById('extraWeightsContainer');
        if (cont) cont.innerHTML = '';
    }
}

// حذف مادة
function deleteMaterial(id) {
    if (confirm('هل أنت متأكد من حذف هذه المادة؟')) {
        fetch(`/costs/cost-statement/${id}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showAlert('تم حذف المادة بنجاح', 'success');
                // إزالة backdrop المعلق
                removeStuckBackdrop();
                setTimeout(() => window.location.reload(), 1500);
            } else {
                showAlert(data.message || 'حدث خطأ في حذف المادة', 'error');
            }
        })
        .catch(error => {
            showAlert('حدث خطأ في حذف المادة', 'error');
        });
    }
}

// دالة إزالة backdrop المعلق
function removeStuckBackdrop() {
    const backdrops = document.querySelectorAll('.modal-backdrop');
    backdrops.forEach(backdrop => {
        backdrop.remove();
    });
    document.body.classList.remove('modal-open');
    document.body.style.overflow = '';
    document.body.style.paddingRight = '';
}

// دالة عرض التنبيهات
function showAlert(message, type) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show`;
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.querySelector('.container').insertBefore(alertDiv, document.querySelector('.container').firstChild);
    
    // إزالة التنبيه تلقائياً بعد 5 ثوان
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.remove();
        }
    }, 5000);
}

// دالة تحويل العملة في نموذج التعديل
function convertCurrencyInEditForm() {
    const currentCurrency = '<%= defaultCurrency ? defaultCurrency.code : "USD" %>';
    const exchangeRate = <%= exchangeRate %>; // استخدام سعر الصرف من الخادم
    
    // تحديث جميع حقول العملة
    const currencyInputs = document.querySelectorAll('#editMaterialModal .currency-input');
    currencyInputs.forEach(input => {
        const field = input.getAttribute('data-field');
        const value = parseFloat(input.value) || 0;
        
        if (currentCurrency === 'SYP') {
            // تحويل من الليرة السورية إلى الدولار
            const usdValue = value / exchangeRate;
            input.setAttribute('data-usd-value', usdValue.toFixed(2));
            input.setAttribute('data-syp-value', value.toFixed(2));
        } else {
            // تحويل من الدولار إلى الليرة السورية
            const sypValue = value * exchangeRate;
            input.setAttribute('data-usd-value', value.toFixed(2));
            input.setAttribute('data-syp-value', sypValue.toFixed(2));
        }
    });
}

// إضافة مستمع الأحداث لحقول العملة في نموذج التعديل
document.addEventListener('DOMContentLoaded', function() {
    const currencyInputs = document.querySelectorAll('#editMaterialModal .currency-input');
    currencyInputs.forEach(input => {
        input.addEventListener('input', function() {
            convertCurrencyInEditForm();
            calculateEditCosts();
        });
    });
});

// حساب التكاليف في نموذج التعديل
function calculateEditCosts() {
    const currentCurrency = '<%= defaultCurrency ? defaultCurrency.code : "USD" %>';
    const exchangeRate = <%= exchangeRate %>;
    
    // تحديد طريقة الحساب
    const isComponentsMethod = document.getElementById('editComponentsMethod').checked;
    
    let priceBeforeWaste, grossWeight;
    
    if (isComponentsMethod) {
        // استخدام القيم المحسوبة من العناصر
        priceBeforeWaste = parseFloat(document.querySelector('input[name="edit_calculated_price_before_waste"]')?.value) || 0;
        grossWeight = parseFloat(document.querySelector('input[name="edit_calculated_gross_weight"]')?.value) || 0;
    } else {
        // استخدام القيم المدخلة يدوياً
        priceBeforeWaste = parseFloat(document.getElementById('editPriceBeforeWaste').value) || 0;
        grossWeight = parseFloat(document.getElementById('editGrossWeight').value) || 0;
    }
    
    const wastePercentage = parseFloat(document.getElementById('editWastePercentage').value) || 0;
    const emptyPackagePrice = parseFloat(document.getElementById('editEmptyPackagePrice').value) || 0;
  const packagingUnitWeight = parseFloat(document.getElementById('editPackagingUnitWeight').value) || 0;
    const stickerPrice = parseFloat(document.getElementById('editStickerPrice').value) || 0;
    const additionalExpenses = parseFloat(document.getElementById('editAdditionalExpenses').value) || 0;
    const laborCost = parseFloat(document.getElementById('editLaborCost').value) || 0;
    const preservativesCost = parseFloat(document.getElementById('editPreservativesCost').value) || 0;
    const cartonPrice = parseFloat(document.getElementById('editCartonPrice').value) || 0;
    const piecesPerPackage = parseInt(document.getElementById('editPiecesPerPackage').value) || 1;
    const palletPrice = parseFloat(document.getElementById('editPalletPrice').value) || 0;
    const packagesPerPallet = parseInt(document.getElementById('editPackagesPerPallet').value) || 1;

    // حساب كلفة القطعة الواحدة
    const netWeight = grossWeight * (1 - wastePercentage / 100);
    const pricePerKgBeforeWaste = grossWeight > 0 ? (priceBeforeWaste / grossWeight) : 0;
    const pricePerKgAfterWaste = pricePerKgBeforeWaste / (1 - wastePercentage / 100 || 1);
  const packagingWeight = parseFloat(document.getElementById('editPackagingWeight').value) || 0; // وزن المادة
    const materialCostInUnit = pricePerKgAfterWaste * packagingWeight;
    const totalPackagingCosts = emptyPackagePrice + stickerPrice + additionalExpenses + laborCost + preservativesCost;
    const unitCost = materialCostInUnit + totalPackagingCosts;

    // حساب كلفة الطرد وفق الصيغة المطلوبة
  const palletShare = palletPrice / packagesPerPallet;
  const packageCost = (unitCost * piecesPerPackage) + cartonPrice + palletShare;
  const extraWeightsTotal = Array.from(document.querySelectorAll('#editMaterialModal .extra-weight-row input.extra-weight-value'))
    .reduce((sum, el) => sum + (parseFloat(el.value) || 0), 0);
  const grossPackageWeight = ((packagingUnitWeight + packagingWeight) * piecesPerPackage) + extraWeightsTotal;

    // عرض النتائج
    const currencySymbol = '<%= defaultCurrency ? defaultCurrency.symbol : "$" %>';
    let unitCostUSD = unitCost;
    let packageCostUSD = packageCost;
    let unitCostSYP = unitCost;
    let packageCostSYP = packageCost;
    if (currentCurrency === 'SYP') {
        unitCostUSD = unitCost / exchangeRate;
        packageCostUSD = packageCost / exchangeRate;
    } else {
        unitCostSYP = unitCost * exchangeRate;
        packageCostSYP = packageCost * exchangeRate;
    }
    const formatUSD2 = (v) => v.toFixed(2);
    const formatSYP2 = (v) => String(Math.round(v));
    const unitMain2 = currentCurrency === 'SYP' ? formatSYP2(unitCost) : formatUSD2(unitCost);
    const packMain2 = currentCurrency === 'SYP' ? formatSYP2(packageCost) : formatUSD2(packageCost);
    document.getElementById('editUnitCostResult').textContent = `${unitMain2} ${currencySymbol} ( ${formatUSD2(unitCostUSD)} $ / ${formatSYP2(unitCostSYP)} ل.س )`;
  document.getElementById('editPackageCostResult').textContent = `${packMain2} ${currencySymbol} ( ${formatUSD2(packageCostUSD)} $ / ${formatSYP2(packageCostSYP)} ل.س )`;
  const grossEl2 = document.getElementById('editGrossPackageWeightResult');
  if (grossEl2) grossEl2.textContent = `${grossPackageWeight.toFixed(3)} كجم`;
    
    // تحديث قيم العملة المحولة
    convertCurrencyInEditForm();
}

// حفظ تعديل المادة
function saveMaterialEdit() {
    const materialId = document.getElementById('editMaterialId').value;
    const currentCurrency = '<%= defaultCurrency ? defaultCurrency.code : "USD" %>';
    const exchangeRate = <%= exchangeRate %>;
    
    // تحديد طريقة الحساب
    const calculationMethod = document.querySelector('input[name="edit_calculation_method"]:checked').value;
    const isComponentsMethod = calculationMethod === 'components';
    
    // جمع القيم مع تحويل العملة
    const formData = {
        material_type: document.getElementById('editMaterialType').value,
        material_name: document.getElementById('editMaterialName').value,
        calculation_method: calculationMethod,
        waste_percentage: document.getElementById('editWastePercentage').value,
        packaging_unit: document.getElementById('editPackagingUnit').value,
        packaging_weight: document.getElementById('editPackagingWeight').value,
        packaging_unit_weight: document.getElementById('editPackagingUnitWeight').value,
        pieces_per_package: document.getElementById('editPiecesPerPackage').value,
        packages_per_pallet: document.getElementById('editPackagesPerPallet').value
    };
    
    // إضافة الوزن والسعر حسب طريقة الحساب
    if (isComponentsMethod) {
        formData.gross_weight = document.querySelector('input[name="edit_calculated_gross_weight"]')?.value;
        formData.components = getEditComponentsData();
        
        // التحقق من وجود عناصر
        if (!formData.components || formData.components.length === 0) {
            showAlert('يرجى إضافة عنصر واحد على الأقل للمادة', 'error');
            return;
        }
    } else {
        formData.gross_weight = document.getElementById('editGrossWeight').value;
    }
    
    // إضافة حقول العملة مع التحويل
    let currencyFields = [
        'empty_package_price', 'sticker_price', 
        'additional_expenses', 'labor_cost', 'preservatives_cost', 
        'carton_price', 'pallet_price'
    ];
    
    // إضافة price_before_waste فقط للطريقة التقليدية
    if (!isComponentsMethod) {
        currencyFields.push('price_before_waste');
    } else {
        // للطريقة الجديدة، استخدم السعر المحسوب
        const calculatedPrice = parseFloat(document.querySelector('input[name="edit_calculated_price_before_waste"]')?.value) || 0;
        if (currentCurrency === 'SYP') {
            formData.price_before_waste = (calculatedPrice / exchangeRate);
            formData.price_before_waste_syp = calculatedPrice;
        } else {
            formData.price_before_waste = calculatedPrice;
        }
    }
    
    currencyFields.forEach(field => {
        // تحويل snake_case إلى PascalCase لبناء المعرّف الصحيح
        const idSuffix = field
            .split('_')
            .map(part => part.charAt(0).toUpperCase() + part.slice(1))
            .join('');
        const input = document.getElementById('edit' + idSuffix);
        const numericValue = parseFloat((input && input.value) ? input.value : '0') || 0;
        
        if (currentCurrency === 'SYP') {
            // إذا كانت العملة الحالية هي الليرة السورية، نحول إلى الدولار ونرسل أيضًا القيمة بالليرة كما أدخلها المستخدم
            formData[field] = (numericValue / exchangeRate);
            formData[field + '_syp'] = numericValue;
        } else {
            // إذا كانت العملة الحالية هي الدولار، نرسلها كما هي بدون تقطيع
            formData[field] = numericValue;
        }
    });

    // جمع الأوزان الإضافية (التعديل)
    const editExtras = [];
    document.querySelectorAll('#editExtraWeightsContainer .extra-weight-row').forEach(row => {
        const name = row.querySelector('.extra-weight-name')?.value?.trim() || '';
        const val = parseFloat(row.querySelector('.extra-weight-value')?.value || '0') || 0;
        if (name || val > 0) editExtras.push({ name, weight: val });
    });
    if (editExtras.length) formData.extra_weights = editExtras;
    
    fetch(`/costs/cost-statement/${materialId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showAlert('تم تحديث المادة بنجاح', 'success');
            // إغلاق المودال بشكل صحيح
            const modal = bootstrap.Modal.getInstance(document.getElementById('editMaterialModal'));
            if (modal) {
                modal.hide();
            }
            // إزالة backdrop المعلق
            removeStuckBackdrop();
            setTimeout(() => window.location.reload(), 1500);
        } else {
            showAlert(data.message || 'حدث خطأ في تحديث المادة', 'error');
        }
    })
    .catch(error => {
        showAlert('حدث خطأ في تحديث المادة', 'error');
    });
}

// دالة تنسيق التاريخ
function formatDate(dateString) {
    if (!dateString) return '-';
    const date = new Date(dateString);
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
}

// دالة استعراض المادة
function viewMaterial(materialId) {
    // جلب بيانات المادة
    fetch(`/costs/cost-statement/${materialId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const material = data.material;
                
                try {
                    // ملء البيانات الأساسية
                    document.getElementById('viewMaterialName').textContent = material.material_name || '-';
                    document.getElementById('viewMaterialType').textContent = material.material_type || '-';
                    document.getElementById('viewMaterialDate').textContent = formatDate(material.created_at);
                    document.getElementById('viewMaterialUpdated').textContent = formatDate(material.updated_at);
                
                // ملء نتائج الحساب
                const currencySymbol = '<%= defaultCurrency ? defaultCurrency.symbol : "$" %>';
                document.getElementById('viewUnitCost').textContent = (parseFloat(material.unit_cost) || 0).toFixed(2) + ' ' + currencySymbol;
                document.getElementById('viewPackageCost').textContent = (parseFloat(material.package_cost) || 0).toFixed(2) + ' ' + currencySymbol;
                
                // ملء بيانات التكلفة الأساسية
                document.getElementById('viewPriceBeforeWaste').textContent = (parseFloat(material.price_before_waste) || 0).toFixed(2) + ' ' + currencySymbol + '/كجم';
                document.getElementById('viewGrossWeight').textContent = (parseFloat(material.gross_weight) || 0).toFixed(2) + ' كجم';
                document.getElementById('viewWastePercentage').textContent = (parseFloat(material.waste_percentage) || 0).toFixed(1) + '%';
                
                // حساب الوزن الصافي
                const grossWeight = parseFloat(material.gross_weight) || 0;
                const wastePercentage = parseFloat(material.waste_percentage) || 0;
                const netWeight = grossWeight * (1 - wastePercentage / 100);
                document.getElementById('viewNetWeight').textContent = netWeight.toFixed(2) + ' كجم';
                
                // ملء بيانات التعبئة
                document.getElementById('viewPackagingUnit').textContent = material.packaging_unit || '-';
                document.getElementById('viewPackagingWeight').textContent = (parseFloat(material.packaging_weight) || 0).toFixed(2) + ' كجم';
                document.getElementById('viewPiecesPerPackage').textContent = material.pieces_per_package || '-';
                document.getElementById('viewPackagesPerPallet').textContent = material.packages_per_pallet || '-';
                
                // ملء تكاليف التعبئة
                document.getElementById('viewEmptyPackagePrice').textContent = (parseFloat(material.empty_package_price) || 0).toFixed(2) + ' ' + currencySymbol;
                document.getElementById('viewStickerPrice').textContent = (parseFloat(material.sticker_price) || 0).toFixed(2) + ' ' + currencySymbol;
                document.getElementById('viewCartonPrice').textContent = (parseFloat(material.carton_price) || 0).toFixed(2) + ' ' + currencySymbol;
                document.getElementById('viewPalletPrice').textContent = (parseFloat(material.pallet_price) || 0).toFixed(2) + ' ' + currencySymbol;
                
                // ملء التكاليف الإضافية
                document.getElementById('viewAdditionalExpenses').textContent = (parseFloat(material.additional_expenses) || 0).toFixed(2) + ' ' + currencySymbol;
                document.getElementById('viewLaborCost').textContent = (parseFloat(material.labor_cost) || 0).toFixed(2) + ' ' + currencySymbol;
                document.getElementById('viewPreservativesCost').textContent = (parseFloat(material.preservatives_cost) || 0).toFixed(2) + ' ' + currencySymbol;
                
                // جلب سجل التكاليف
                loadCostLogs(materialId);
                
                // فتح Modal
                const modal = new bootstrap.Modal(document.getElementById('viewMaterialModal'));
                modal.show();
            } catch (error) {
                console.error('خطأ في معالجة بيانات المادة:', error);
                showAlert('حدث خطأ في معالجة بيانات المادة', 'error');
            }
            } else {
                showAlert(data.message || 'حدث خطأ في جلب بيانات المادة', 'error');
            }
        })
        .catch(error => {
            console.error('خطأ في جلب بيانات المادة:', error);
            showAlert('حدث خطأ في جلب بيانات المادة', 'error');
        });
}

// دالة جلب سجل التكاليف
function loadCostLogs(materialId) {
    fetch(`/costs/cost-statement/${materialId}/logs`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const tbody = document.getElementById('costLogsBody');
                tbody.innerHTML = '';
                
                data.logs.forEach(log => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${formatDate(log.calculation_date)}</td>
                                                        <td>${parseFloat(log.unit_cost).toFixed(2)} ${currencySymbol}</td>
                                <td>${parseFloat(log.package_cost).toFixed(2)} ${currencySymbol}</td>
                    `;
                    tbody.appendChild(row);
                });
            }
        })
        .catch(error => {
            console.error('خطأ في جلب سجل التكاليف:', error);
        });
}

// دالة طباعة تفاصيل المادة
function printMaterialDetails() {
    const printWindow = window.open('', '_blank');
    const materialName = document.getElementById('viewMaterialName').textContent;
    
    printWindow.document.write(`
        <html dir="rtl">
        <head>
            <title>تفاصيل المادة - ${materialName}</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .header { text-align: center; margin-bottom: 30px; }
                .section { margin-bottom: 20px; }
                .section h3 { color: #007bff; border-bottom: 2px solid #007bff; padding-bottom: 5px; }
                table { width: 100%; border-collapse: collapse; margin-bottom: 15px; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: right; }
                th { background-color: #f8f9fa; }
                .highlight { background-color: #e3f2fd; font-weight: bold; }
                @media print { .no-print { display: none; } }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>تفاصيل المادة</h1>
                <h2>${materialName}</h2>
            </div>
            
            <div class="section">
                <h3>المعلومات الأساسية</h3>
                <table>
                    <tr><th>اسم المادة</th><td>${document.getElementById('viewMaterialName').textContent}</td></tr>
                    <tr><th>نوع المادة</th><td>${document.getElementById('viewMaterialType').textContent}</td></tr>
                    <tr><th>تاريخ الإضافة</th><td>${document.getElementById('viewMaterialDate').textContent}</td></tr>
                    <tr><th>آخر تحديث</th><td>${document.getElementById('viewMaterialUpdated').textContent}</td></tr>
                </table>
            </div>
            
            <div class="section">
                <h3>نتائج الحساب</h3>
                <table>
                    <tr class="highlight"><th>كلفة القطعة الواحدة</th><td>${document.getElementById('viewUnitCost').textContent}</td></tr>
                    <tr class="highlight"><th>كلفة الطرد</th><td>${document.getElementById('viewPackageCost').textContent}</td></tr>
                </table>
            </div>
            
            <div class="section">
                <h3>بيانات التكلفة الأساسية</h3>
                <table>
                    <tr><th>السعر قبل الهدر</th><td>${document.getElementById('viewPriceBeforeWaste').textContent}</td></tr>
                    <tr><th>الوزن الجمالي</th><td>${document.getElementById('viewGrossWeight').textContent}</td></tr>
                    <tr><th>نسبة الهدر</th><td>${document.getElementById('viewWastePercentage').textContent}</td></tr>
                    <tr><th>الوزن الصافي</th><td>${document.getElementById('viewNetWeight').textContent}</td></tr>
                </table>
            </div>
            
            <div class="section">
                <h3>بيانات التعبئة</h3>
                <table>
                    <tr><th>وحدة التعبئة</th><td>${document.getElementById('viewPackagingUnit').textContent}</td></tr>
                    <tr><th>وزن وحدة التعبئة</th><td>${document.getElementById('viewPackagingWeight').textContent}</td></tr>
                    <tr><th>عدد الحبات في الطرد</th><td>${document.getElementById('viewPiecesPerPackage').textContent}</td></tr>
                    <tr><th>عدد الطرود في الطبلية</th><td>${document.getElementById('viewPackagesPerPallet').textContent}</td></tr>
                </table>
            </div>
            
            <div class="section">
                <h3>تكاليف التعبئة</h3>
                <table>
                    <tr><th>ثمن العبوة الفارغة</th><td>${document.getElementById('viewEmptyPackagePrice').textContent}</td></tr>
                    <tr><th>ثمن اللصاقة</th><td>${document.getElementById('viewStickerPrice').textContent}</td></tr>
                    <tr><th>ثمن كرتونة</th><td>${document.getElementById('viewCartonPrice').textContent}</td></tr>
                    <tr><th>ثمن الطبلية</th><td>${document.getElementById('viewPalletPrice').textContent}</td></tr>
                </table>
            </div>
            
            <div class="section">
                <h3>تكاليف إضافية</h3>
                <table>
                    <tr><th>مصاريف إضافية</th><td>${document.getElementById('viewAdditionalExpenses').textContent}</td></tr>
                    <tr><th>مصروف عمال</th><td>${document.getElementById('viewLaborCost').textContent}</td></tr>
                    <tr><th>مواد حافظة</th><td>${document.getElementById('viewPreservativesCost').textContent}</td></tr>
                </table>
            </div>
            
            <div class="section">
                <h3>سجل التكاليف</h3>
                <table>
                    <thead>
                        <tr><th>التاريخ</th><th>كلفة القطعة</th><th>كلفة الطرد</th></tr>
                    </thead>
                    <tbody id="printCostLogsBody">
                        ${document.getElementById('costLogsBody').innerHTML}
                    </tbody>
                </table>
            </div>
        </body>
        </html>
    `);
    
    printWindow.document.close();
    printWindow.print();
}
</script>

<style>
/* تحسين إمكانية الوصول */
.btn-close:focus {
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    outline: none;
}

.modal:focus {
    outline: none;
}

/* تحسين التركيز للعناصر القابلة للتركيز */
.form-control:focus,
.form-select:focus,
.btn:focus {
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    border-color: #86b7fe;
}

/* منع Bootstrap من إضافة aria-hidden */
.modal[aria-hidden] {
    aria-hidden: unset !important;
}

/* تحسين التركيز للمودالات */
.modal:not(.show) {
    display: none !important;
}

/* دعم inert attribute */
.modal[inert] {
    pointer-events: none;
}

.modal[inert] * {
    pointer-events: none;
}

.modal[inert] input,
.modal[inert] button,
.modal[inert] select,
.modal[inert] textarea {
    pointer-events: none;
}

/* إصلاح مشكلة backdrop المعلق */
.modal-backdrop {
    z-index: 1040;
}

.modal-backdrop.show {
    opacity: 0.5;
}

/* إزالة backdrop المعلق عند عدم وجود مودال مفتوح */
body:not(.modal-open) .modal-backdrop {
    display: none !important;
}

/* تحسين إدارة overflow */
body.modal-open {
    overflow: hidden;
    padding-right: 0 !important;
}
</style>

<script>
// تصدير PDF لتفاصيل المادة
document.addEventListener('DOMContentLoaded', function(){
  const exportBtn = document.getElementById('exportMaterialPdfBtn');
  if (!exportBtn) return;
  exportBtn.addEventListener('click', async function(){
    // الحصول على معرف المادة من سياق المعاينة
    let materialId = null;
    const viewModal = document.getElementById('viewMaterialModal');
    if (viewModal && viewModal.getAttribute('data-material-id')) {
      materialId = viewModal.getAttribute('data-material-id');
    }
    if (!materialId) {
      // كحل مؤقت إن لم يتوفر، اطلب من المستخدم
      materialId = prompt('أدخل معرّف المادة المراد تصديرها كـ PDF:');
    }
    if (!materialId) return;
    exportBtn.disabled = true;
    exportBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> جاري التصدير...';
    try {
      const res = await fetch(`/costs/cost-statement/${materialId}/pdf`);
      const data = await res.json();
      if (data.success && data.url) {
        const linkInput = document.getElementById('materialPdfLinkInput');
        const openBtn = document.getElementById('openMaterialPdfLinkBtn');
        const waBtn = document.getElementById('whatsappMaterialShareBtn');
        if (linkInput) linkInput.value = data.url;
        if (openBtn) openBtn.href = data.url;
        if (waBtn) waBtn.href = `https://wa.me/?text=${encodeURIComponent(data.url)}`;
        const modal = new bootstrap.Modal(document.getElementById('materialPdfExportModal'));
        modal.show();
      } else {
        alert(data.message || 'حدث خطأ أثناء توليد ملف PDF');
      }
    } catch (e) {
      alert('حدث خطأ في الاتصال بالخادم');
    }
    exportBtn.disabled = false;
    exportBtn.innerHTML = '<i class="bi bi-file-earmark-pdf"></i> تصدير PDF';
  });
  const copyBtn = document.getElementById('copyMaterialPdfLinkBtn');
  const linkInput = document.getElementById('materialPdfLinkInput');
  if (copyBtn && linkInput) {
    copyBtn.addEventListener('click', function(){ linkInput.select(); document.execCommand('copy'); });
  }
});
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const table = document.getElementById('materialsTable');
    const keywordInput = document.getElementById('materialKeywordSearch');
    const dateInputEl = document.getElementById('materialDateSearch');
    if (!table || !keywordInput || !dateInputEl) return;

    // Initialize Flatpickr for date input
    const datepicker = flatpickr(dateInputEl, {
        locale: 'ar',
        dateFormat: 'Y-m-d',
        altFormat: 'd/m/Y',
        altInput: true,
        allowInput: true
    });

    const pad2 = (n) => (n < 10 ? '0' + n : '' + n);
    const getSelectedDateISO = () => {
        if (datepicker && datepicker.selectedDates && datepicker.selectedDates[0]) {
            const d = datepicker.selectedDates[0];
            return `${d.getFullYear()}-${pad2(d.getMonth()+1)}-${pad2(d.getDate())}`;
        }
        const raw = dateInputEl.value && dateInputEl.value.trim();
        if (!raw) return '';
        // Try parse from altInput (d/m/Y)
        const m = raw.match(/^(\d{1,2})\/(\d{1,2})\/(\d{4})$/);
        if (m) {
            return `${m[3]}-${pad2(parseInt(m[2],10))}-${pad2(parseInt(m[1],10))}`;
        }
        // Accept direct ISO input if typed manually
        if (/^\d{4}-\d{2}-\d{2}$/.test(raw)) return raw;
        return '';
    };

    const normalize = (t) => (t || '').toString().toLowerCase().trim();

    const filterRows = () => {
        const keyword = normalize(keywordInput.value);
        const selectedDate = getSelectedDateISO();
        const rows = table.querySelectorAll('tbody tr');
        rows.forEach((row) => {
            const name = normalize(row.querySelector('.material-name')?.textContent);
            const type = normalize(row.querySelector('.material-type')?.textContent);
            const dateText = (row.querySelector('.material-date')?.textContent || '').trim();
            let dateISO = '';
            if (dateText) {
                const parts = dateText.split('/'); // DD/MM/YYYY
                if (parts.length === 3) {
                    const dd = parseInt(parts[0], 10);
                    const mm = parseInt(parts[1], 10);
                    const yyyy = parts[2];
                    if (!Number.isNaN(dd) && !Number.isNaN(mm)) {
                        dateISO = `${yyyy}-${pad2(mm)}-${pad2(dd)}`;
                    }
                }
            }

            const keywordMatch = !keyword || name.includes(keyword) || type.includes(keyword);
            const dateMatch = !selectedDate || dateISO === selectedDate;

            row.style.display = (keywordMatch && dateMatch) ? '' : 'none';
        });
    };

    // Debounce for keyword typing
    let debounceTimer;
    const debouncedFilter = () => {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(filterRows, 150);
    };

    keywordInput.addEventListener('input', debouncedFilter);
    // Flatpickr triggers onChange reliably; input handles manual edits
    dateInputEl.addEventListener('change', filterRows);
    dateInputEl.addEventListener('input', filterRows);
    if (datepicker) {
        datepicker.config.onChange.push(filterRows);
        datepicker.config.onClose.push(filterRows);
    }

    // Initial filter (in case of prefilled values)
    filterRows();
});
</script>