<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex flex-column flex-lg-row justify-content-between align-items-start align-items-lg-center mb-4">
                <h2 class="mb-3 mb-lg-0"><i class="bi bi-cart-check"></i> الطلبيات</h2>
                <div class="row g-2 align-items-center justify-content-end w-100 w-lg-auto">
                    <div class="col-12 col-md-auto">
                        <div class="input-group" style="min-width: 220px;">
                            <span class="input-group-text"><i class="bi bi-hash"></i></span>
                            <input type="text" id="orderNumberFilter" class="form-control" placeholder="رقم الطلبية">
                        </div>
                    </div>
                    <div class="col-12 col-md-auto">
                        <div class="input-group" style="min-width: 240px;">
                            <span class="input-group-text"><i class="bi bi-person"></i></span>
                            <input type="text" id="orderClientFilter" class="form-control" placeholder="اسم الزبون">
                        </div>
                    </div>
                    <div class="col-12 col-md-auto">
                        <input type="text" id="orderDateFilter" class="form-control" placeholder="تاريخ الطلبية: يوم/شهر/سنة" style="min-width: 220px;">
                    </div>
                    <div class="col-12 col-md-auto">
                        <input type="text" id="deliveryDateFilter" class="form-control" placeholder="تاريخ التسليم: يوم/شهر/سنة" style="min-width: 220px;">
                    </div>
                    <div class="col-12 col-md-auto">
                        <button type="button" class="btn btn-primary w-100 w-md-auto" data-bs-toggle="modal" data-bs-target="#createOrderModal">
                            <i class="bi bi-plus-circle me-1"></i> إنشاء طلبية جديدة
                        </button>
                    </div>
                    <div class="col-12 col-md-auto">
                        <a href="/costs" class="btn btn-outline-secondary w-100 w-md-auto">
                            <i class="bi bi-arrow-right me-1"></i> العودة للتكاليف
                        </a>
                    </div>
                </div>
            </div>

            

            <!-- جدول الطلبيات الموجودة -->
            <% if (orders && orders.length > 0) { %>
            <div class="card shadow">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-list-ul"></i> الطلبيات المسجلة</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table id="ordersTable" class="table table-hover">
                            <thead>
                                <tr>
                                    <th>رقم الطلبية</th>
                                    <th>اسم الزبون</th>
                                    <th>تاريخ الطلبية</th>
                                    <th>تاريخ التسليم</th>
                                    <th>المسؤول عن التجهيز</th>
                                    <th>مراقب الجودة</th>
                                    <th>عدد الطبالي</th>
                                    <th>رقم الحاوية</th>
                                    <th>عدد الطرود</th>
                                    <th>رقم البوليصة</th>
                                    <th>رقم الاعتماد</th>
                                    <th>الحالة</th>
                                    <th>الإجراءات</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% orders.forEach(order => { %>
                                <tr>
                                    <td class="order-number"><%= order.order_number %></td>
                                    <td class="order-client"><%= order.client_name || '-' %></td>
                                    <td class="order-date"><%= formatDate(order.order_date) %></td>
                                    <td class="delivery-date"><%= formatDate(order.delivery_date) %></td>
                                    <td><%= order.responsible_worker || '-' %></td>
                                    <td><%= order.quality_controller || '-' %></td>
                                    <td><%= order.pallets_count || '-' %></td>
                                    <td><%= order.container_number || '-' %></td>
                                    <td><%= order.packages_count || '-' %></td>
                                    <td><%= order.waybill_number || '-' %></td>
                                    <td><%= order.accreditation_number || '-' %></td>
                                    <td>
                                        <span class="badge bg-<%= 
                                            order.status === 'pending' ? 'warning' : 
                                            order.status === 'processing' ? 'info' : 
                                            order.status === 'completed' ? 'success' : 'danger' 
                                        %>">
                                            <%= 
                                                order.status === 'pending' ? 'قيد الانتظار' :
                                                order.status === 'processing' ? 'قيد المعالجة' :
                                                order.status === 'completed' ? 'مكتمل' : 'ملغي'
                                            %>
                                        </span>
                                    </td>
                                    <td>
                                        <div class="btn-group">
                                            <a href="/costs/orders/<%= order.id %>/details" class="btn btn-sm btn-secondary" title="معاينة"><i class="bi bi-eye"></i></a>
                                            <button type="button" class="btn btn-sm btn-info" onclick="editOrder(<%= order.id %>)" title="تعديل">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-warning" onclick="updateOrderStatus('<%= order.id %>', 'processing')" title="قيد المعالجة">
                                                <i class="bi bi-play"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-success" onclick="updateOrderStatus('<%= order.id %>', 'completed')" title="مكتمل">
                                                <i class="bi bi-check"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-danger" onclick="updateOrderStatus('<%= order.id %>', 'cancelled')" title="إلغاء">
                                                <i class="bi bi-x"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-danger" onclick="deleteOrder(<%= order.id %>)" title="حذف">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                <% }); %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <% } else { %>
            <div class="card shadow">
              <div class="card-body text-center py-5">
                <i class="bi bi-cart-x fs-1 text-muted mb-3"></i>
                <h5 class="mb-2">لا توجد طلبيات حتى الآن</h5>
                <p class="text-muted">ابدأ بإنشاء أول طلبية باستخدام الزر أدناه.</p>
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createOrderModal">
                  <i class="bi bi-plus-circle me-1"></i> إنشاء طلبية جديدة
                </button>
                </div>
            </div>
            <% } %>
        </div>
    </div>
</div>

<!-- Modal تعديل الطلبية -->
<div class="modal fade" id="editOrderModal" tabindex="-1">
    <div class="modal-dialog modal-fullscreen">
        <div class="modal-content">
            <div class="modal-header" style="position: sticky; top: 0; background: white; border-bottom: 1px solid #dee2e6;">
                <h5 class="modal-title"><i class="bi bi-pencil-square me-2"></i> تعديل الطلبية</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="إغلاق"></button>
            </div>
            <div class="modal-body" style="max-height: calc(100vh - 200px); overflow-y: auto;">
                <form id="editOrderForm">
                    <input type="hidden" id="editOrderId" name="order_id">
                    <input type="hidden" id="editOrderDate" name="order_date">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">اسم العميل *</label>
                            <input type="text" class="form-control" id="editClientName" name="client_name" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">رقم الهاتف</label>
                            <input type="text" class="form-control" id="editClientPhone" name="client_phone">
                        </div>
                        <div class="col-md-12">
                            <label class="form-label">العنوان</label>
                            <textarea class="form-control" id="editClientAddress" name="client_address" rows="2"></textarea>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">تاريخ التسليم *</label>
                            <div class="input-group">
                                <input type="text" class="form-control datepicker" id="editDeliveryDate" name="delivery_date" readonly required>
                                <button type="button" class="btn btn-outline-secondary" onclick="openDatePicker('editDeliveryDate')">
                                    <i class="bi bi-calendar"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">اسم العامل المسؤول</label>
                            <input type="text" class="form-control" id="editResponsibleWorker" name="responsible_worker">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">مراقب جودة للطلبية</label>
                            <input type="text" class="form-control" id="editQualityController" name="quality_controller">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">عدد الطبالي</label>
                            <input type="number" class="form-control" id="editPalletsCount" name="pallets_count" min="0">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">رقم الحاوية</label>
                            <input type="text" class="form-control" id="editContainerNumber" name="container_number">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">عدد الطرود</label>
                            <input type="number" class="form-control" id="editPackagesCount" name="packages_count" min="0">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">رقم البوليصة</label>
                            <input type="text" class="form-control" id="editWaybillNumber" name="waybill_number">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">رقم الاعتماد</label>
                            <input type="text" class="form-control" id="editAccreditationNumber" name="accreditation_number">
                        </div>
                        <div class="col-md-12">
                            <label class="form-label">ملاحظات</label>
                            <textarea class="form-control" id="editNotes" name="notes" rows="3"></textarea>
                        </div>
                    </div>

                    <hr>
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h6 class="mb-0"><i class="bi bi-box-seam me-1"></i> مواد الطلبية</h6>
                        <button type="button" class="btn btn-outline-primary btn-sm" onclick="addEditOrderItemRow()">
                          <i class="bi bi-plus-circle me-1"></i> إضافة مادة
                        </button>
                    </div>
                    <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                        <table class="table table-bordered" id="editOrderItemsTable">
                            <thead>
                                <tr>
                                    <th>المادة</th>
                                    <th>الوحدة</th>
                                    <th>الكمية المطلوبة</th>
                                    <th>الوزن الصافي</th>
                                    <th>وزن الطرد القائم</th>
                                    <th>سعر الطرد</th>
                                    <th>السعر الإجمالي</th>
                                    <th>ملاحظات</th>
                                    <th>الإجراءات</th>
                                </tr>
                            </thead>
                            <tbody id="editOrderItemsBody"></tbody>
                        </table>
                    </div>
                </form>
            </div>
            <div class="modal-footer" style="position: sticky; bottom: 0; background: white; border-top: 1px solid #dee2e6;">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                <button type="button" class="btn btn-primary" onclick="saveOrderEdit()">
                  <i class="bi bi-save me-1"></i> حفظ التعديلات
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal إنشاء طلبية جديدة -->
<div class="modal fade" id="createOrderModal" tabindex="-1">
  <div class="modal-dialog modal-fullscreen">
    <div class="modal-content">
      <div class="modal-header" style="position: sticky; top: 0; background: white; border-bottom: 1px solid #dee2e6;">
        <h5 class="modal-title"><i class="bi bi-plus-circle me-2"></i> إنشاء طلبية جديدة</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="إغلاق"></button>
      </div>
      <div class="modal-body" style="max-height: calc(100vh - 200px); overflow-y: auto;">
        <form id="orderForm" method="POST" action="/costs/orders">
          <div class="row g-3 mb-3">
                         <div class="col-md-6">
               <label class="form-label">اسم الزبون *</label>
               <input type="text" class="form-control" name="client_name" required>
             </div>
            <div class="col-md-3">
              <label class="form-label">تاريخ الطلبية</label>
              <div class="input-group">
                <input type="text" class="form-control datepicker" id="orderDateInput" name="order_date" readonly>
                <button type="button" class="btn btn-outline-secondary" onclick="openDatePicker('orderDateInput')"><i class="bi bi-calendar"></i></button>
              </div>
            </div>
            <div class="col-md-3">
              <label class="form-label">تاريخ التسليم</label>
              <div class="input-group">
                <input type="text" class="form-control datepicker" id="deliveryDateInput" name="delivery_date" readonly>
                <button type="button" class="btn btn-outline-secondary" onclick="openDatePicker('deliveryDateInput')"><i class="bi bi-calendar"></i></button>
              </div>
            </div>
            <div class="col-md-4">
              <label class="form-label">المسؤول عن التجهيز</label>
              <input type="text" class="form-control" name="responsible_worker">
            </div>
            <div class="col-md-4">
              <label class="form-label">مراقب جودة للطلبية</label>
              <input type="text" class="form-control" name="quality_controller">
            </div>
            <div class="col-md-4">
              <label class="form-label">عدد الطبالي</label>
              <input type="number" class="form-control" name="pallets_count" min="0">
            </div>
            <div class="col-md-4">
              <label class="form-label">رقم الحاوية</label>
              <input type="text" class="form-control" name="container_number">
            </div>
            <div class="col-md-4">
              <label class="form-label">عدد الطرود</label>
              <input type="number" class="form-control" name="packages_count" min="0">
            </div>
            <div class="col-md-4">
              <label class="form-label">رقم البوليصة</label>
              <input type="text" class="form-control" name="waybill_number">
            </div>
            <div class="col-md-4">
              <label class="form-label">رقم الاعتماد</label>
              <input type="text" class="form-control" name="accreditation_number">
            </div>
            <div class="col-12">
              <label class="form-label">ملاحظات</label>
              <textarea class="form-control" name="notes" rows="2"></textarea>
            </div>
          </div>

          <div class="d-flex justify-content-between align-items-center mb-2">
            <h6 class="mb-0"><i class="bi bi-box-seam me-1"></i> مواد الطلبية</h6>
            <button type="button" class="btn btn-outline-primary btn-sm" onclick="addOrderItemRow()">
              <i class="bi bi-plus-circle me-1"></i> إضافة مادة
            </button>
          </div>
          <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
            <table class="table table-bordered" id="orderItemsTable">
              <thead>
                <tr>
                  <th>المادة</th>
                  <th>الوحدة</th>
                  <th>الكمية المطلوبة</th>
                  <th>الوزن الصافي</th>
                  <th>وزن الطرد القائم</th>
                  <th>سعر الطرد</th>
                  <th>السعر الإجمالي</th>
                  <th>ملاحظات</th>
                  <th>الإجراءات</th>
                </tr>
              </thead>
              <tbody id="orderItemsBody"></tbody>
            </table>
          </div>
        </form>
      </div>
      <div class="modal-footer" style="position: sticky; bottom: 0; background: white; border-top: 1px solid #dee2e6;">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
        <button type="submit" form="orderForm" class="btn btn-primary">
          <i class="bi bi-save me-1"></i> حفظ الطلبية
        </button>
      </div>
        </div>
    </div>
</div>

<!-- Modal التقويم -->
<div class="modal fade" id="datePickerModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">اختر التاريخ</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="إغلاق"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-6">
                        <select class="form-select" id="monthSelect">
                            <option value="1">يناير</option>
                            <option value="2">فبراير</option>
                            <option value="3">مارس</option>
                            <option value="4">أبريل</option>
                            <option value="5">مايو</option>
                            <option value="6">يونيو</option>
                            <option value="7">يوليو</option>
                            <option value="8">أغسطس</option>
                            <option value="9">سبتمبر</option>
                            <option value="10">أكتوبر</option>
                            <option value="11">نوفمبر</option>
                            <option value="12">ديسمبر</option>
                        </select>
                    </div>
                    <div class="col-6">
                        <select class="form-select" id="yearSelect"></select>
                    </div>
                </div>
                <div class="calendar-container">
                    <div class="calendar-header">
                        <button type="button" class="btn btn-sm btn-outline-secondary" id="prevMonth">
                            <i class="bi bi-chevron-left"></i>
                        </button>
                        <span id="currentMonthYear"></span>
                        <button type="button" class="btn btn-sm btn-outline-secondary" id="nextMonth">
                            <i class="bi bi-chevron-right"></i>
                        </button>
                    </div>
                    <div class="calendar-body" id="calendarBody"></div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                <button type="button" class="btn btn-primary" id="confirmDate">تأكيد</button>
            </div>
        </div>
    </div>
</div>

<script>
// تمرير قائمة المواد من الخادم إلى الواجهة
window.materials = <%- JSON.stringify(typeof materials !== 'undefined' ? materials : []) %>;
const currencySymbol = '<%= (typeof defaultCurrency !== "undefined" && defaultCurrency && defaultCurrency.symbol) ? defaultCurrency.symbol : '' %>';
const exchangeRate = <%= exchangeRate %>;
const defaultCurrencyCode = '<%= (typeof defaultCurrency !== "undefined" && defaultCurrency && defaultCurrency.code) ? defaultCurrency.code : '' %>';
const isSyp = defaultCurrencyCode === 'SYP';

// دالة تنسيق الأرقام حسب العملة
const formatUSD = (v) => (parseFloat(v) || 0).toFixed(2);
const formatSYP = (v) => String(Math.round(parseFloat(v) || 0));
const displayMoney = (v) => {
  const value = parseFloat(v) || 0;
  return defaultCurrencyCode === 'SYP' ? formatSYP(value) : formatUSD(value);
};

// دالة لتقريب الأرقام العشرية بشكل صحيح
const roundToDecimal = (value, decimals = 2) => {
  return Math.round(value * Math.pow(10, decimals)) / Math.pow(10, decimals);
};
let nextOrderRowId = 0;
let currentDateInput = null;
let selectedDate = null;
let currentMonth = new Date().getMonth();
let currentYear = new Date().getFullYear();
let currentOrderPickerRowId = null;

// أسماء الأشهر بالعربية
const monthNames = [
    'يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو',
    'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'
];

// أسماء أيام الأسبوع بالعربية
const dayNames = ['الأحد', 'الإثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت'];

// تهيئة التقويم
document.addEventListener('DOMContentLoaded', function() {
    initializeCalendar();
    setDefaultDates();
    
    // تحسين إمكانية الوصول للمودالات
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        // إزالة aria-hidden من جميع المودالات لمنع تضارب التركيز
        modal.removeAttribute('aria-hidden');
        
        modal.addEventListener('shown.bs.modal', function() {
            // التركيز على أول عنصر قابل للتركيز بعد فتح المودال
            setTimeout(() => {
                const firstFocusable = this.querySelector('input:not([readonly]), button:not([disabled]), select, textarea');
                if (firstFocusable) {
                    firstFocusable.focus();
                }
            }, 100);
        });
        
        // منع Bootstrap من إضافة aria-hidden
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.type === 'attributes' && mutation.attributeName === 'aria-hidden') {
                    modal.removeAttribute('aria-hidden');
                }
            });
        });
        
        observer.observe(modal, {
            attributes: true,
            attributeFilter: ['aria-hidden']
        });
    });
    
    // إضافة مستمعي الأحداث
    document.getElementById('prevMonth').addEventListener('click', function() {
        currentMonth--;
        if (currentMonth < 0) {
            currentMonth = 11;
            currentYear--;
        }
        renderCalendar();
    });
    
    document.getElementById('nextMonth').addEventListener('click', function() {
        currentMonth++;
        if (currentMonth > 11) {
            currentMonth = 0;
            currentYear++;
        }
        renderCalendar();
    });
    
    document.getElementById('monthSelect').addEventListener('change', function() {
        currentMonth = parseInt(this.value) - 1;
        renderCalendar();
    });
    
    document.getElementById('yearSelect').addEventListener('change', function() {
        currentYear = parseInt(this.value);
        renderCalendar();
    });
    
    document.getElementById('confirmDate').addEventListener('click', function() {
        if (selectedDate) {
            const day = selectedDate.getDate().toString().padStart(2, '0');
            const month = (selectedDate.getMonth() + 1).toString().padStart(2, '0');
            const year = selectedDate.getFullYear();
            const formattedDate = `${day}/${month}/${year}`;
            
            if (currentDateInput) currentDateInput.value = formattedDate;
            
            const modal = bootstrap.Modal.getInstance(document.getElementById('datePickerModal'));
            modal.hide();
        }
    });
});

// دالة تهيئة التقويم
function initializeCalendar() {
    // ملء قائمة السنوات
    const yearSelect = document.getElementById('yearSelect');
    const currentYear = new Date().getFullYear();
    
    for (let year = currentYear - 10; year <= currentYear + 5; year++) {
        const option = document.createElement('option');
        option.value = year;
        option.textContent = year;
        yearSelect.appendChild(option);
    }
    
    // تعيين القيم الحالية
    document.getElementById('monthSelect').value = currentMonth + 1;
    document.getElementById('yearSelect').value = currentYear;
    
    renderCalendar();
}

// دالة عرض التقويم
function renderCalendar() {
    const calendarBody = document.getElementById('calendarBody');
    const currentMonthYear = document.getElementById('currentMonthYear');
    
    // تحديث العنوان
    currentMonthYear.textContent = `${monthNames[currentMonth]} ${currentYear}`;
    
    // تحديث قوائم الاختيار
    document.getElementById('monthSelect').value = currentMonth + 1;
    document.getElementById('yearSelect').value = currentYear;
    
    // إنشاء التقويم
    const firstDay = new Date(currentYear, currentMonth, 1);
    const lastDay = new Date(currentYear, currentMonth + 1, 0);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - firstDay.getDay());
    
    let calendarHTML = '<div class="calendar-grid">';
    
    // أيام الأسبوع
    dayNames.forEach(day => {
        calendarHTML += `<div class="calendar-day-header">${day}</div>`;
    });
    
    // أيام الشهر
    for (let i = 0; i < 42; i++) {
        const date = new Date(startDate);
        date.setDate(startDate.getDate() + i);
        
        const isCurrentMonth = date.getMonth() === currentMonth;
        const isToday = date.toDateString() === new Date().toDateString();
        const isSelected = selectedDate && date.toDateString() === selectedDate.toDateString();
        
        let className = 'calendar-day';
        if (!isCurrentMonth) className += ' other-month';
        if (isToday) className += ' today';
        if (isSelected) className += ' selected';
        
        calendarHTML += `<div class="${className}" onclick="selectDate(new Date(${date.getTime()}))">${date.getDate()}</div>`;
    }
    
    calendarHTML += '</div>';
    calendarBody.innerHTML = calendarHTML;
}

// دالة اختيار التاريخ
function selectDate(date) {
    selectedDate = date;
    renderCalendar();
}

// دالة فتح التقويم
function openDatePicker(inputId) {
    currentDateInput = document.getElementById(inputId);
    const modal = new bootstrap.Modal(document.getElementById('datePickerModal'));
    modal.show();
}

// دالة تعيين التواريخ الافتراضية
function setDefaultDates() {
    const today = new Date();
    const day = today.getDate().toString().padStart(2, '0');
    const month = (today.getMonth() + 1).toString().padStart(2, '0');
    const year = today.getFullYear();
    const formattedDate = `${day}/${month}/${year}`;
    
    const orderDate = document.getElementById('orderDateInput');
    if (orderDate) orderDate.value = formattedDate;
    const deliveryDate = document.getElementById('deliveryDateInput');
    if (deliveryDate) deliveryDate.value = formattedDate;
}

// دالة تنسيق التاريخ
function formatDate(dateString) {
    if (!dateString) return '-';
    const date = new Date(dateString);
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
}

// دالة تعديل الطلبية
function editOrder(orderId) {
    // جلب بيانات الطلبية
    fetch(`/costs/orders/${orderId}`)
        .then(response => response.json())
        .then(data => {
            if (!data.success) throw new Error('LOAD_FAILED');
            const order = data.order;
            const items = Array.isArray(data.items) ? data.items : [];

            document.getElementById('editOrderId').value = order.id;
            document.getElementById('editClientName').value = order.client_name || '';
            document.getElementById('editClientPhone').value = order.client_phone || '';
            document.getElementById('editClientAddress').value = order.client_address || '';
            document.getElementById('editOrderDate').value = formatDate(order.order_date);
            document.getElementById('editDeliveryDate').value = formatDate(order.delivery_date);
            document.getElementById('editResponsibleWorker').value = order.responsible_worker || '';
            document.getElementById('editQualityController').value = order.quality_controller || '';
            document.getElementById('editPalletsCount').value = order.pallets_count || '';
            document.getElementById('editContainerNumber').value = order.container_number || '';
            document.getElementById('editPackagesCount').value = order.packages_count || '';
            document.getElementById('editWaybillNumber').value = order.waybill_number || '';
            document.getElementById('editAccreditationNumber').value = order.accreditation_number || '';
            document.getElementById('editNotes').value = order.notes || '';

            // تعبئة مواد الطلبية
            const tbody = document.getElementById('editOrderItemsBody');
            tbody.innerHTML = '';
            items.forEach(it => addEditOrderItemRow(it));
            
            const modal = new bootstrap.Modal(document.getElementById('editOrderModal'));
            modal.show();
        })
        .catch(error => {
            showAlert('حدث خطأ في جلب بيانات الطلبية', 'error');
        });
}

// دالة حفظ تعديل الطلبية
function saveOrderEdit() {
    const formData = new FormData(document.getElementById('editOrderForm'));
    const orderId = document.getElementById('editOrderId').value;
    const clientName = formData.get('client_name')?.trim();
    
    // التحقق من الحقول المطلوبة
    if (!clientName) {
        showAlert('يرجى إدخال اسم العميل', 'error');
        return;
    }
    
    const items = collectEditOrderItems();
    
    fetch(`/costs/orders/${orderId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            client_name: clientName,
            order_date: formData.get('order_date'),
            client_phone: formData.get('client_phone'),
            client_address: formData.get('client_address'),
            delivery_date: formData.get('delivery_date'),
            responsible_worker: formData.get('responsible_worker'),
            quality_controller: formData.get('quality_controller'),
            pallets_count: parseInt(formData.get('pallets_count')||'')||null,
            container_number: formData.get('container_number'),
            packages_count: parseInt(formData.get('packages_count')||'')||null,
            waybill_number: formData.get('waybill_number'),
            accreditation_number: formData.get('accreditation_number'),
            notes: formData.get('notes'),
            currency: defaultCurrencyCode,
            items
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showAlert('تم تحديث الطلبية بنجاح', 'success');
            setTimeout(() => window.location.reload(), 1500);
        } else {
            showAlert(data.message || 'حدث خطأ في تحديث الطلبية', 'error');
        }
    })
    .catch(error => {
        showAlert('حدث خطأ في تحديث الطلبية', 'error');
    });
}

// تحديث حالة الطلبية
function updateOrderStatus(orderId, status) {
    const statusText = {
        'pending': 'قيد الانتظار',
        'processing': 'قيد المعالجة',
        'completed': 'مكتمل',
        'cancelled': 'ملغي'
    };
    
    if (confirm(`هل تريد تغيير حالة الطلبية إلى "${statusText[status]}"؟`)) {
        fetch(`/costs/orders/${orderId}/status`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showAlert('تم تحديث حالة الطلبية بنجاح', 'success');
                setTimeout(() => window.location.reload(), 1500);
            } else {
                showAlert(data.message || 'حدث خطأ في تحديث حالة الطلبية', 'error');
            }
        })
        .catch(error => {
            showAlert('حدث خطأ في تحديث حالة الطلبية', 'error');
        });
    }
}

// حذف طلبية
function deleteOrder(id) {
    if (confirm('هل أنت متأكد من حذف هذه الطلبية؟')) {
        fetch(`/costs/orders/${id}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showAlert('تم حذف الطلبية بنجاح', 'success');
                setTimeout(() => window.location.reload(), 1500);
            } else {
                showAlert(data.message || 'حدث خطأ في حذف الطلبية', 'error');
            }
        })
        .catch(error => {
            showAlert('حدث خطأ في حذف الطلبية', 'error');
        });
    }
}

// معالجة نموذج إنشاء الطلبية
document.getElementById('orderForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const clientName = formData.get('client_name')?.trim();
    
    // التحقق من الحقول المطلوبة
    if (!clientName) {
        showAlert('يرجى إدخال اسم الزبون', 'error');
        return;
    }
    
    const items = collectOrderItems();
    
    fetch('/costs/orders', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            client_name: clientName,
            order_date: formData.get('order_date'),
            delivery_date: formData.get('delivery_date'),
            responsible_worker: formData.get('responsible_worker'),
            quality_controller: formData.get('quality_controller'),
            pallets_count: parseInt(formData.get('pallets_count')||'')||null,
            container_number: formData.get('container_number'),
            packages_count: parseInt(formData.get('packages_count')||'')||null,
            waybill_number: formData.get('waybill_number'),
            accreditation_number: formData.get('accreditation_number'),
            notes: formData.get('notes'),
            currency: defaultCurrencyCode,
            items
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showAlert('تم إنشاء الطلبية بنجاح', 'success');
            this.reset();
            setTimeout(() => window.location.reload(), 1500);
        } else {
            showAlert(data.message || 'حدث خطأ في إنشاء الطلبية', 'error');
        }
    })
    .catch(error => {
        showAlert('حدث خطأ في إنشاء الطلبية', 'error');
    });
});

// دالة عرض التنبيهات
function showAlert(message, type) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show`;
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.querySelector('.container').insertBefore(alertDiv, document.querySelector('.container').firstChild);
    
    // إزالة التنبيه تلقائياً بعد 5 ثوان
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.remove();
        }
    }, 5000);
}

// مواد الطلبية: إضافة/حذف/جمع
function addOrderItemRow(){
  const tbody = document.getElementById('orderItemsBody');
  const tr = document.createElement('tr');
  const rowId = nextOrderRowId++;
  tr.setAttribute('data-row-id', rowId);
  const materialOptions = (window.materials || []).map(m => {
    const packageCost = defaultCurrencyCode === 'SYP' 
      ? (m.package_cost_syp || m.package_cost || 0) 
      : (m.package_cost || 0);
    return `<option value="${m.id}" data-unit="${m.packaging_unit||''}" data-weight="${m.gross_package_weight!=null?m.gross_package_weight:''}" data-package-cost="${packageCost}" data-package-cost-syp="${m.package_cost_syp || m.package_cost || 0}" data-package-cost-usd="${m.package_cost || 0}">${m.material_name}</option>`;
  }).join('');
  tr.innerHTML = `
    <td>
      <div class="d-flex align-items-center gap-2">
        <input type="text" class="form-control order-material-name" placeholder="لم يتم اختيار مادة" readonly>
        <input type="hidden" class="order-material-id">
        <button type="button" class="btn btn-outline-primary btn-sm" onclick="openOrderMaterialPicker(${rowId})"><i class="bi bi-search"></i> اختر</button>
      </div>
    </td>
    <td><input type="text" class="form-control order-unit" readonly></td>
    <td><input type="number" class="form-control order-qty" step="0.001" min="0" value="1" oninput="onOrderCalcRow(this)"></td>
    <td><input type="number" class="form-control order-net-weight" step="0.001" min="0" placeholder="بعد الهدر (محسوب تلقائياً)"></td>
    <td><input type="number" class="form-control order-gross-weight" step="0.001" min="0" placeholder="من بيانات المادة (3 أرقام بعد الفاصلة)"></td>
    <td>
      <div class="input-group">
        <input type="number" class="form-control order-unit-price" step="0.01" min="0" placeholder="اختياري" oninput="onOrderCalcRow(this)">
        <span class="input-group-text">${currencySymbol}</span>
      </div>
      <small class="text-muted package-cost-display">اختر مادة لعرض سعر الطرد</small>
    </td>
    <td>
      <div class="input-group">
        <input type="number" class="form-control order-total-price" step="0.01" min="0" readonly>
        <span class="input-group-text">${currencySymbol}</span>
      </div>
    </td>
    <td><input type="text" class="form-control order-notes"></td>
    <td><button type="button" class="btn btn-sm btn-danger" onclick="this.closest('tr').remove()"><i class="bi bi-trash"></i></button></td>
  `;
  tbody.appendChild(tr);
}

function setOrderRowMaterial(tr, material){
  if (!tr || !material) return;
  tr.querySelector('.order-material-id').value = material.id;
  tr.querySelector('.order-material-name').value = material.material_name || '';
  tr.querySelector('.order-unit').value = material.packaging_unit || '';
  // تعبئة الوزن القائم إن وُجد
  const gross = material.gross_package_weight != null ? parseFloat(material.gross_package_weight) : null;
  tr.querySelector('.order-gross-weight').value = (gross && !isNaN(gross)) ? gross.toFixed(3) : '';
  // الكمية الافتراضية 1 وحساب إجمالي السعر إن كان هناك سعر
  const qtyEl = tr.querySelector('.order-qty');
  if (qtyEl && (!qtyEl.value || parseFloat(qtyEl.value) <= 0)) qtyEl.value = '1';
  const displayElement = tr.querySelector('.package-cost-display');
  if (displayElement) {
    const pkg = parseFloat(material.package_cost) || 0;
    displayElement.textContent = `سعر الطرد: ${displayMoney(pkg)} ${currencySymbol}`;
  }
  onOrderCalcRow(qtyEl);
}

function collectOrderItems(){
  const items = [];
  document.querySelectorAll('#orderItemsBody tr').forEach(tr =>{
    const materialId = tr.querySelector('.order-material-id')?.value ? parseInt(tr.querySelector('.order-material-id').value) : null;
    const materialName = tr.querySelector('.order-material-name')?.value || '';
    const unit = tr.querySelector('.order-unit')?.value || null;
    const qty = parseFloat(tr.querySelector('.order-qty')?.value||'');
    const netWeight = parseFloat(tr.querySelector('.order-net-weight')?.value||'');
    const grossWeight = parseFloat(tr.querySelector('.order-gross-weight')?.value||'');
    const unitPrice = parseFloat(tr.querySelector('.order-unit-price')?.value||'');
    const totalPrice = (!isNaN(unitPrice) && !isNaN(qty)) ? roundToDecimal(unitPrice * qty, defaultCurrencyCode === 'SYP' ? 0 : 2) : null;
    const notes = tr.querySelector('.order-notes')?.value || null;
    
    // جمع بيانات العملات
    let packageCostSYP = 0, packageCostUSD = 0;
    // التكاليف قد لا تكون متاحة بدون select؛ حاول تقديرها لاحقاً إن لزم
    
    if (materialId || materialName){
      items.push({
        material_id: materialId,
        material_name: materialName,
        unit,
        requested_quantity: isNaN(qty)? null : qty,
        net_weight: isNaN(netWeight)? null : netWeight,
        gross_weight: isNaN(grossWeight)? null : grossWeight,
        unit_price: isNaN(unitPrice)? null : unitPrice,
        total_price: totalPrice,
        package_cost_syp: packageCostSYP,
        package_cost_usd: packageCostUSD,
        notes
      });
    }
  });
  return items;
}

function onOrderCalcRow(el){
  const tr = el.closest('tr');
  const qty = parseFloat(tr.querySelector('.order-qty')?.value||'');
  const unitPrice = parseFloat(tr.querySelector('.order-unit-price')?.value||'');
  const totalEl = tr.querySelector('.order-total-price');
  if (totalEl){
    if (!isNaN(qty) && !isNaN(unitPrice)) {
      const total = roundToDecimal(qty * unitPrice, defaultCurrencyCode === 'SYP' ? 0 : 2);
      totalEl.value = total;
    } else {
      totalEl.value = '';
    }
  }
}

// مواد الطلبية (التعديل)
function addEditOrderItemRow(item){
  const tbody = document.getElementById('editOrderItemsBody');
  const tr = document.createElement('tr');
  const materials = Array.isArray(window.materials) ? window.materials : [];
  const materialOptions = materials.map(m => {
    const packageCost = defaultCurrencyCode === 'SYP' 
      ? (m.package_cost_syp || m.package_cost || 0) 
      : (m.package_cost || 0);
    return `<option value="${m.id}" data-unit="${m.packaging_unit||''}" data-weight="${m.gross_package_weight!=null?m.gross_package_weight:''}" data-package-cost="${packageCost}" data-package-cost-syp="${m.package_cost_syp || m.package_cost || 0}" data-package-cost-usd="${m.package_cost || 0}">${m.material_name}</option>`;
  }).join('');
  const selectedId = item && item.material_id ? String(item.material_id) : '';
  const selectedUnit = item && item.unit ? item.unit : '';
  const selectedName = item && item.material_name ? item.material_name : '';

  tr.innerHTML = `
    <td>
      <select class="form-select edit-order-material" onchange="onEditOrderMaterialChange(this)">
        <option value="">اختر المادة</option>
        ${materialOptions}
      </select>
    </td>
    <td><input type="text" class="form-control edit-order-unit" value="${selectedUnit}" readonly></td>
    <td><input type="number" class="form-control edit-order-qty" step="0.001" min="0" value="${item && item.requested_quantity != null ? item.requested_quantity : ''}"></td>
    <td><input type="number" class="form-control edit-order-net-weight" step="0.001" min="0" value="${item && item.net_weight != null ? item.net_weight : ''}" placeholder="بعد الهدر (محسوب تلقائياً)"></td>
    <td><input type="number" class="form-control edit-order-gross-weight" step="0.001" min="0" value="${item && item.gross_weight != null ? parseFloat(item.gross_weight).toFixed(3) : ''}" placeholder="من بيانات المادة (3 أرقام بعد الفاصلة)"></td>
    <td>
      <div class="input-group">
        <input type="number" class="form-control edit-order-unit-price" step="0.01" min="0" value="${item && item.unit_price != null ? item.unit_price : ''}" oninput="onEditOrderCalcRow(this)">
        <span class="input-group-text">${currencySymbol}</span>
      </div>
      <small class="text-muted edit-package-cost-display">اختر مادة لعرض سعر الطرد</small>
    </td>
    <td>
      <div class="input-group">
        <input type="number" class="form-control edit-order-total-price" step="0.01" min="0" value="${item && item.total_price != null ? item.total_price : ''}" readonly>
        <span class="input-group-text">${currencySymbol}</span>
      </div>
    </td>
    <td><input type="text" class="form-control edit-order-notes" value="${item && item.notes ? item.notes : ''}"></td>
    <td><button type="button" class="btn btn-sm btn-danger" onclick="this.closest('tr').remove()"><i class="bi bi-trash"></i></button></td>
  `;

  tbody.appendChild(tr);

  const selectEl = tr.querySelector('.edit-order-material');
  if (selectedId && Array.from(selectEl.options).some(o => o.value === selectedId)){
    selectEl.value = selectedId;
    const unit = selectEl.selectedOptions[0]?.getAttribute('data-unit')||'';
    tr.querySelector('.edit-order-unit').value = unit || selectedUnit;
    
         // تحديث عرض سعر الطرد للمادة المختارة
     const packageCost = selectEl.selectedOptions[0]?.getAttribute('data-package-cost');
     const displayElement = tr.querySelector('.edit-package-cost-display');
     if (displayElement && packageCost) {
       const cost = parseFloat(packageCost);
       displayElement.textContent = `سعر الطرد: ${displayMoney(cost)} ${currencySymbol}`;
     }
  } else if (selectedName){
    // مادة غير موجودة في القائمة، أضفها مؤقتاً
    const opt = document.createElement('option');
    opt.value = '';
    opt.textContent = selectedName;
    opt.selected = true;
    selectEl.appendChild(opt);
    tr.querySelector('.edit-order-unit').value = selectedUnit;
  }
}

function onEditOrderMaterialChange(selectEl){
  const tr = selectEl.closest('tr');
  const opt = selectEl.selectedOptions[0];
  const unit = opt?.getAttribute('data-unit')||'';
  tr.querySelector('.edit-order-unit').value = unit;
  
  // جلب بيانات المادة من الخادم
  if (opt && opt.value) {
    fetch(`/costs/cost-statement/${opt.value}`)
      .then(response => response.json())
      .then(data => {
        if (data.success && data.material) {
          const material = data.material;
          // حساب الوزن الصافي بعد الهدر
          const grossWeight = parseFloat(material.gross_weight) || 0;
          const wastePercentage = parseFloat(material.waste_percentage) || 0;
          const netWeight = grossWeight * (1 - wastePercentage / 100);
          
          // تعبئة الوزن الصافي والوزن القائم من بيانات المادة
          tr.querySelector('.edit-order-net-weight').value = netWeight > 0 ? netWeight.toFixed(3) : '';
          tr.querySelector('.edit-order-gross-weight').value = material.gross_package_weight ? parseFloat(material.gross_package_weight).toFixed(3) : '';
        }
      })
      .catch(error => {
        console.error('خطأ في جلب بيانات المادة:', error);
      });
  }
  
  // تحديث عرض سعر الطرد
  const packageCost = opt?.getAttribute('data-package-cost');
  const displayElement = tr.querySelector('.edit-package-cost-display');
  if (displayElement && packageCost && opt && opt.value) {
    const cost = parseFloat(packageCost);
    displayElement.textContent = `سعر الطرد: ${displayMoney(cost)} ${currencySymbol}`;
  } else if (displayElement) {
    displayElement.textContent = `اختر مادة لعرض سعر الطرد`;
  }
  
  onEditOrderCalcRow(tr.querySelector('.edit-order-qty'));
}

function collectEditOrderItems(){
  const items = [];
  document.querySelectorAll('#editOrderItemsBody tr').forEach(tr =>{
    const sel = tr.querySelector('.edit-order-material');
    const materialId = sel && sel.value ? parseInt(sel.value) : null;
    const materialName = sel && sel.selectedOptions[0] ? sel.selectedOptions[0].textContent.trim() : '';
    const unit = tr.querySelector('.edit-order-unit')?.value || null;
    const qtyVal = parseFloat(tr.querySelector('.edit-order-qty')?.value||'');
    const netWeight = parseFloat(tr.querySelector('.edit-order-net-weight')?.value||'');
    const grossWeight = parseFloat(tr.querySelector('.edit-order-gross-weight')?.value||'');
    const unitPrice = parseFloat(tr.querySelector('.edit-order-unit-price')?.value||'');
    const qty = qtyVal;
    const totalPrice = (!isNaN(unitPrice) && !isNaN(qty)) ? roundToDecimal(unitPrice * qty, defaultCurrencyCode === 'SYP' ? 0 : 2) : null;
    const notes = tr.querySelector('.edit-order-notes')?.value || null;
    
    // جمع بيانات العملات
    let packageCostSYP = 0, packageCostUSD = 0;
    if (sel && sel.selectedOptions[0]) {
      packageCostSYP = parseFloat(sel.selectedOptions[0].getAttribute('data-package-cost-syp') || 0);
      packageCostUSD = parseFloat(sel.selectedOptions[0].getAttribute('data-package-cost-usd') || 0);
    }
    
    if (materialId || materialName){
      items.push({
        material_id: materialId,
        material_name: materialName,
        unit,
        requested_quantity: isNaN(qty)? null : qty,
        net_weight: isNaN(netWeight)? null : netWeight,
        gross_weight: isNaN(grossWeight)? null : grossWeight,
        unit_price: isNaN(unitPrice)? null : unitPrice,
        total_price: totalPrice,
        package_cost_syp: packageCostSYP,
        package_cost_usd: packageCostUSD,
        notes
      });
    }
  });
  return items;
}

function onEditOrderCalcRow(el){
  const tr = el.closest('tr');
  const qty = parseFloat(tr.querySelector('.edit-order-qty')?.value||'');
  const unitPrice = parseFloat(tr.querySelector('.edit-order-unit-price')?.value||'');
  const totalEl = tr.querySelector('.edit-order-total-price');
  if (totalEl){
    if (!isNaN(qty) && !isNaN(unitPrice)) {
      const total = roundToDecimal(qty * unitPrice, defaultCurrencyCode === 'SYP' ? 0 : 2);
      totalEl.value = total;
    } else {
      totalEl.value = '';
    }
  }
}
</script>

<!-- Modal اختيار المواد للطلبات -->
<div class="modal fade" id="selectOrderMaterialModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">اختيار مواد من المواد المسجلة</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div class="search-container mb-3">
          <div class="input-group">
            <span class="input-group-text bg-light border-end-0"><i class="bi bi-search text-muted"></i></span>
            <input type="text" class="form-control border-start-0 ps-0" id="orderMaterialSearchInput" placeholder="ابحث باسم المادة أو النوع..." autocomplete="off">
            <button type="button" class="btn btn-outline-secondary border-start-0" id="clearOrderMaterialSearchBtn" style="display: none;"><i class="bi bi-x-lg"></i></button>
          </div>
        </div>
        <div class="table-responsive">
          <table class="table table-hover">
            <thead class="table-light">
              <tr>
                <th>الاسم</th>
                <th>النوع</th>
                <th>الوحدة</th>
                <th>سعر الطرد</th>
                <th>إضافة</th>
              </tr>
            </thead>
            <tbody id="materialsPickerBodyOrders"></tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
function openOrderMaterialPicker(rowId){
  currentOrderPickerRowId = rowId;
  buildOrderMaterialsPickerTable();
  const modal = new bootstrap.Modal(document.getElementById('selectOrderMaterialModal'));
  modal.show();
}

function buildOrderMaterialsPickerTable(){
  const tbody = document.getElementById('materialsPickerBodyOrders');
  if (!tbody) return;
  const mats = Array.isArray(window.materials) ? window.materials : [];
  const rowsHtml = mats.map(m => {
    const pkg = displayMoney(m.package_cost || 0);
    return `
      <tr>
        <td class="pick-name">${m.material_name}</td>
        <td class="pick-type">${m.material_type || ''}</td>
        <td>${m.packaging_unit || ''}</td>
        <td>${pkg} ${currencySymbol}</td>
        <td><button type="button" class="btn btn-sm btn-success" onclick="selectOrderMaterial(${m.id})"><i class="bi bi-plus-circle"></i></button></td>
      </tr>`;
  }).join('');
  tbody.innerHTML = rowsHtml;
  wireOrderMaterialSearch();
}

function wireOrderMaterialSearch(){
  const input = document.getElementById('orderMaterialSearchInput');
  const clearBtn = document.getElementById('clearOrderMaterialSearchBtn');
  const tbody = document.getElementById('materialsPickerBodyOrders');
  if (!input || !tbody) return;
  const filter = () => {
    const q = (input.value || '').toLowerCase().trim();
    Array.from(tbody.querySelectorAll('tr')).forEach(tr => {
      const name = (tr.querySelector('.pick-name')?.textContent || '').toLowerCase();
      const type = (tr.querySelector('.pick-type')?.textContent || '').toLowerCase();
      const ok = !q || name.includes(q) || type.includes(q);
      tr.style.display = ok ? '' : 'none';
    });
    if (clearBtn) clearBtn.style.display = q ? '' : 'none';
  };
  input.removeEventListener('input', input._orderMatFilter);
  input._orderMatFilter = filter;
  input.addEventListener('input', filter);
  if (clearBtn){ clearBtn.onclick = () => { input.value = ''; filter(); input.focus(); }; }
  filter();
}

function selectOrderMaterial(materialId){
  if (currentOrderPickerRowId == null) return;
  const tr = document.querySelector(`#orderItemsBody tr[data-row-id="${currentOrderPickerRowId}"]`);
  const mats = Array.isArray(window.materials) ? window.materials : [];
  const mat = mats.find(m => m.id == materialId);
  if (tr && mat){
    setOrderRowMaterial(tr, mat);
  }
  const modalEl = document.getElementById('selectOrderMaterialModal');
  const modal = bootstrap.Modal.getInstance(modalEl);
  if (modal) modal.hide();
}

// واجهة عامة
window.openOrderMaterialPicker = openOrderMaterialPicker;
window.selectOrderMaterial = selectOrderMaterial;
</script>

<style>
.calendar-container {
    text-align: center;
}

.calendar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
}

.calendar-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 1px;
    background-color: #dee2e6;
    border: 1px solid #dee2e6;
}

.calendar-day-header {
    background-color: #f8f9fa;
    padding: 0.5rem;
    font-weight: bold;
    font-size: 0.875rem;
}

.calendar-day {
    background-color: white;
    padding: 0.5rem;
    cursor: pointer;
    transition: background-color 0.2s;
}

.calendar-day:hover {
    background-color: #e9ecef;
}

.calendar-day.other-month {
    color: #6c757d;
}

.calendar-day.today {
    background-color: #007bff;
    color: white;
}

.calendar-day.selected {
    background-color: #28a745;
    color: white;
}

.calendar-day.selected:hover {
    background-color: #218838;
}

/* تحسين إمكانية الوصول */
.btn-close:focus {
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    outline: none;
}

.modal:focus {
    outline: none;
}

/* تحسين التركيز للعناصر القابلة للتركيز */
.form-control:focus,
.form-select:focus,
.btn:focus {
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    border-color: #86b7fe;
}

/* تحسين إمكانية الوصول للمودالات */
.modal {
    pointer-events: auto;
}

.modal .btn-close:focus {
    outline: 2px solid #007bff;
    outline-offset: 2px;
}

/* منع Bootstrap من إضافة aria-hidden */
.modal[aria-hidden] {
    aria-hidden: unset !important;
}

/* تحسين التركيز للمودالات */
.modal:not(.show) {
    display: none !important;
}
</style> 
<script>
document.addEventListener('DOMContentLoaded', function() {
    const table = document.getElementById('ordersTable');
    const numberInput = document.getElementById('orderNumberFilter');
    const clientInput = document.getElementById('orderClientFilter');
    const orderDateInput = document.getElementById('orderDateFilter');
    const deliveryDateInput = document.getElementById('deliveryDateFilter');
    if (!table || !numberInput || !clientInput || !orderDateInput || !deliveryDateInput) return;

    const fpOrder = flatpickr(orderDateInput, { locale: 'ar', dateFormat: 'Y-m-d', altFormat: 'd/m/Y', altInput: true, allowInput: true });
    const fpDelivery = flatpickr(deliveryDateInput, { locale: 'ar', dateFormat: 'Y-m-d', altFormat: 'd/m/Y', altInput: true, allowInput: true });

    const pad2 = (n) => (n < 10 ? '0' + n : '' + n);
    const toISO = (date) => `${date.getFullYear()}-${pad2(date.getMonth()+1)}-${pad2(date.getDate())}`;
    const parseAnyToISO = (raw, fpInstance) => {
        if (fpInstance && fpInstance.selectedDates && fpInstance.selectedDates[0]) return toISO(fpInstance.selectedDates[0]);
        raw = (raw || '').trim();
        if (!raw) return '';
        const m = raw.match(/^(\d{1,2})\/(\d{1,2})\/(\d{4})$/);
        if (m) return `${m[3]}-${pad2(parseInt(m[2],10))}-${pad2(parseInt(m[1],10))}`;
        if (/^\d{4}-\d{2}-\d{2}$/.test(raw)) return raw;
        return '';
    };

    const normalize = (t) => (t || '').toString().toLowerCase().trim();
    const filterRows = () => {
        const n = normalize(numberInput.value);
        const c = normalize(clientInput.value);
        const dOrder = parseAnyToISO(orderDateInput.value, fpOrder);
        const dDelivery = parseAnyToISO(deliveryDateInput.value, fpDelivery);
        const rows = table.querySelectorAll('tbody tr');
        rows.forEach((row) => {
            const num = normalize(row.querySelector('.order-number')?.textContent);
            const cli = normalize(row.querySelector('.order-client')?.textContent);
            const orderText = (row.querySelector('.order-date')?.textContent || '').trim();
            const deliveryText = (row.querySelector('.delivery-date')?.textContent || '').trim();
            let orderISO = '', deliveryISO = '';
            if (orderText) {
                const p = orderText.split('/');
                if (p.length === 3) orderISO = `${p[2]}-${pad2(parseInt(p[1],10))}-${pad2(parseInt(p[0],10))}`;
            }
            if (deliveryText) {
                const p = deliveryText.split('/');
                if (p.length === 3) deliveryISO = `${p[2]}-${pad2(parseInt(p[1],10))}-${pad2(parseInt(p[0],10))}`;
            }
            const numOk = !n || (num && num.includes(n));
            const cliOk = !c || (cli && cli.includes(c));
            const orderOk = !dOrder || orderISO === dOrder;
            const deliveryOk = !dDelivery || deliveryISO === dDelivery;
            row.style.display = (numOk && cliOk && orderOk && deliveryOk) ? '' : 'none';
        });
    };

    let t; const debounced = () => { clearTimeout(t); t = setTimeout(filterRows, 150); };
    numberInput.addEventListener('input', debounced);
    clientInput.addEventListener('input', debounced);
    orderDateInput.addEventListener('input', filterRows);
    orderDateInput.addEventListener('change', filterRows);
    deliveryDateInput.addEventListener('input', filterRows);
    deliveryDateInput.addEventListener('change', filterRows);
    if (fpOrder) { fpOrder.config.onChange.push(filterRows); fpOrder.config.onClose.push(filterRows); }
    if (fpDelivery) { fpDelivery.config.onChange.push(filterRows); fpDelivery.config.onClose.push(filterRows); }

    filterRows();
});
</script>