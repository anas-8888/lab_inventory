<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="bi bi-cart-check"></i> الطلبيات</h2>
                <div class="d-flex gap-2">
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createOrderModal">
                        <i class="bi bi-plus-circle me-1"></i> إنشاء طلبية جديدة
                    </button>
                <a href="/costs" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-right me-1"></i> العودة للتكاليف
                </a>
                </div>
            </div>

            

            <!-- جدول الطلبيات الموجودة -->
            <% if (orders && orders.length > 0) { %>
            <div class="card shadow">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-list-ul"></i> الطلبيات المسجلة</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>رقم الطلبية</th>
                                    <th>اسم الزبون</th>
                                    <th>تاريخ الطلبية</th>
                                    <th>تاريخ التسليم</th>
                                    <th>المسؤول عن التجهيز</th>
                                    <th>مراقب الجودة</th>
                                    <th>عدد الطبالي</th>
                                    <th>رقم الحاوية</th>
                                    <th>عدد الطرود</th>
                                    <th>رقم البوليصة</th>
                                    <th>رقم الاعتماد</th>
                                    <th>الحالة</th>
                                    <th>الإجراءات</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% orders.forEach(order => { %>
                                <tr>
                                    <td><%= order.order_number %></td>
                                    <td><%= order.client_name || '-' %></td>
                                    <td><%= formatDate(order.order_date) %></td>
                                    <td><%= formatDate(order.delivery_date) %></td>
                                    <td><%= order.responsible_worker || '-' %></td>
                                    <td><%= order.quality_controller || '-' %></td>
                                    <td><%= order.pallets_count || '-' %></td>
                                    <td><%= order.container_number || '-' %></td>
                                    <td><%= order.packages_count || '-' %></td>
                                    <td><%= order.waybill_number || '-' %></td>
                                    <td><%= order.accreditation_number || '-' %></td>
                                    <td>
                                        <span class="badge bg-<%= 
                                            order.status === 'pending' ? 'warning' : 
                                            order.status === 'processing' ? 'info' : 
                                            order.status === 'completed' ? 'success' : 'danger' 
                                        %>">
                                            <%= 
                                                order.status === 'pending' ? 'قيد الانتظار' :
                                                order.status === 'processing' ? 'قيد المعالجة' :
                                                order.status === 'completed' ? 'مكتمل' : 'ملغي'
                                            %>
                                        </span>
                                    </td>
                                    <td>
                                        <div class="btn-group">
                                            <a href="/costs/orders/<%= order.id %>/details" class="btn btn-sm btn-secondary" title="معاينة"><i class="bi bi-eye"></i></a>
                                            <button type="button" class="btn btn-sm btn-info" onclick="editOrder(<%= order.id %>)" title="تعديل">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-warning" onclick="updateOrderStatus('<%= order.id %>', 'processing')" title="قيد المعالجة">
                                                <i class="bi bi-play"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-success" onclick="updateOrderStatus('<%= order.id %>', 'completed')" title="مكتمل">
                                                <i class="bi bi-check"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-danger" onclick="updateOrderStatus('<%= order.id %>', 'cancelled')" title="إلغاء">
                                                <i class="bi bi-x"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-danger" onclick="deleteOrder(<%= order.id %>)" title="حذف">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                <% }); %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <% } else { %>
            <div class="card shadow">
              <div class="card-body text-center py-5">
                <i class="bi bi-cart-x fs-1 text-muted mb-3"></i>
                <h5 class="mb-2">لا توجد طلبيات حتى الآن</h5>
                <p class="text-muted">ابدأ بإنشاء أول طلبية باستخدام الزر أدناه.</p>
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createOrderModal">
                  <i class="bi bi-plus-circle me-1"></i> إنشاء طلبية جديدة
                </button>
                </div>
            </div>
            <% } %>
        </div>
    </div>
</div>

<!-- Modal تعديل الطلبية -->
<div class="modal fade" id="editOrderModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">تعديل الطلبية</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editOrderForm">
                    <input type="hidden" id="editOrderId" name="order_id">
                    <input type="hidden" id="editOrderDate" name="order_date">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">اسم العميل *</label>
                            <input type="text" class="form-control" id="editClientName" name="client_name" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">رقم الهاتف</label>
                            <input type="text" class="form-control" id="editClientPhone" name="client_phone">
                        </div>
                        <div class="col-md-12">
                            <label class="form-label">العنوان</label>
                            <textarea class="form-control" id="editClientAddress" name="client_address" rows="2"></textarea>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">تاريخ التسليم *</label>
                            <div class="input-group">
                                <input type="text" class="form-control datepicker" id="editDeliveryDate" name="delivery_date" readonly required>
                                <button type="button" class="btn btn-outline-secondary" onclick="openDatePicker('editDeliveryDate')">
                                    <i class="bi bi-calendar"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">اسم العامل المسؤول</label>
                            <input type="text" class="form-control" id="editResponsibleWorker" name="responsible_worker">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">مراقب جودة للطلبية</label>
                            <input type="text" class="form-control" id="editQualityController" name="quality_controller">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">عدد الطبالي</label>
                            <input type="number" class="form-control" id="editPalletsCount" name="pallets_count" min="0">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">رقم الحاوية</label>
                            <input type="text" class="form-control" id="editContainerNumber" name="container_number">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">عدد الطرود</label>
                            <input type="number" class="form-control" id="editPackagesCount" name="packages_count" min="0">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">رقم البوليصة</label>
                            <input type="text" class="form-control" id="editWaybillNumber" name="waybill_number">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">رقم الاعتماد</label>
                            <input type="text" class="form-control" id="editAccreditationNumber" name="accreditation_number">
                        </div>
                        <div class="col-md-12">
                            <label class="form-label">ملاحظات</label>
                            <textarea class="form-control" id="editNotes" name="notes" rows="3"></textarea>
                        </div>
                    </div>

                    <hr>
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h6 class="mb-0">مواد الطلبية</h6>
                        <button type="button" class="btn btn-outline-primary btn-sm" onclick="addEditOrderItemRow()"><i class="bi bi-plus"></i> إضافة مادة</button>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-bordered" id="editOrderItemsTable">
                            <thead>
                                <tr>
                                    <th>المادة</th>
                                    <th>الوحدة</th>
                                    <th>الكمية المطلوبة</th>
                                    <th>الوزن</th>
                                    <th>الحجم</th>
                                    <th>سعر الطرد</th>
                                    <th>السعر الإجمالي</th>
                                    <th>ملاحظات</th>
                                    <th>الإجراءات</th>
                                </tr>
                            </thead>
                            <tbody id="editOrderItemsBody"></tbody>
                        </table>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                <button type="button" class="btn btn-primary" onclick="saveOrderEdit()">حفظ التعديلات</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal إنشاء طلبية جديدة -->
<div class="modal fade" id="createOrderModal" tabindex="-1">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">إنشاء طلبية جديدة</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="orderForm" method="POST" action="/costs/orders">
          <div class="row g-3 mb-3">
            <div class="col-md-6">
              <label class="form-label">اسم الزبون</label>
              <input type="text" class="form-control" name="client_name">
            </div>
            <div class="col-md-3">
              <label class="form-label">تاريخ الطلبية</label>
              <div class="input-group">
                <input type="text" class="form-control datepicker" id="orderDateInput" name="order_date" readonly>
                <button type="button" class="btn btn-outline-secondary" onclick="openDatePicker('orderDateInput')"><i class="bi bi-calendar"></i></button>
              </div>
            </div>
            <div class="col-md-3">
              <label class="form-label">تاريخ التسليم</label>
              <div class="input-group">
                <input type="text" class="form-control datepicker" id="deliveryDateInput" name="delivery_date" readonly>
                <button type="button" class="btn btn-outline-secondary" onclick="openDatePicker('deliveryDateInput')"><i class="bi bi-calendar"></i></button>
              </div>
            </div>
            <div class="col-md-4">
              <label class="form-label">المسؤول عن التجهيز</label>
              <input type="text" class="form-control" name="responsible_worker">
            </div>
            <div class="col-md-4">
              <label class="form-label">مراقب جودة للطلبية</label>
              <input type="text" class="form-control" name="quality_controller">
            </div>
            <div class="col-md-4">
              <label class="form-label">عدد الطبالي</label>
              <input type="number" class="form-control" name="pallets_count" min="0">
            </div>
            <div class="col-md-4">
              <label class="form-label">رقم الحاوية</label>
              <input type="text" class="form-control" name="container_number">
            </div>
            <div class="col-md-4">
              <label class="form-label">عدد الطرود</label>
              <input type="number" class="form-control" name="packages_count" min="0">
            </div>
            <div class="col-md-4">
              <label class="form-label">رقم البوليصة</label>
              <input type="text" class="form-control" name="waybill_number">
            </div>
            <div class="col-md-4">
              <label class="form-label">رقم الاعتماد</label>
              <input type="text" class="form-control" name="accreditation_number">
            </div>
            <div class="col-12">
              <label class="form-label">ملاحظات</label>
              <textarea class="form-control" name="notes" rows="2"></textarea>
            </div>
          </div>

          <div class="d-flex justify-content-between align-items-center mb-2">
            <h6 class="mb-0">مواد الطلبية</h6>
            <button type="button" class="btn btn-outline-primary btn-sm" onclick="addOrderItemRow()"><i class="bi bi-plus"></i> إضافة مادة</button>
          </div>
          <div class="table-responsive">
            <table class="table table-bordered" id="orderItemsTable">
              <thead>
                <tr>
                  <th>المادة</th>
                  <th>الوحدة</th>
                  <th>الكمية المطلوبة</th>
                  <th>الوزن</th>
                  <th>الحجم</th>
                  <th>سعر الطرد</th>
                  <th>السعر الإجمالي</th>
                  <th>ملاحظات</th>
                  <th>الإجراءات</th>
                </tr>
              </thead>
              <tbody id="orderItemsBody"></tbody>
            </table>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
        <button type="submit" form="orderForm" class="btn btn-primary">حفظ الطلبية</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal التقويم -->
<div class="modal fade" id="datePickerModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">اختر التاريخ</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-6">
                        <select class="form-select" id="monthSelect">
                            <option value="1">يناير</option>
                            <option value="2">فبراير</option>
                            <option value="3">مارس</option>
                            <option value="4">أبريل</option>
                            <option value="5">مايو</option>
                            <option value="6">يونيو</option>
                            <option value="7">يوليو</option>
                            <option value="8">أغسطس</option>
                            <option value="9">سبتمبر</option>
                            <option value="10">أكتوبر</option>
                            <option value="11">نوفمبر</option>
                            <option value="12">ديسمبر</option>
                        </select>
                    </div>
                    <div class="col-6">
                        <select class="form-select" id="yearSelect"></select>
                    </div>
                </div>
                <div class="calendar-container">
                    <div class="calendar-header">
                        <button type="button" class="btn btn-sm btn-outline-secondary" id="prevMonth">
                            <i class="bi bi-chevron-left"></i>
                        </button>
                        <span id="currentMonthYear"></span>
                        <button type="button" class="btn btn-sm btn-outline-secondary" id="nextMonth">
                            <i class="bi bi-chevron-right"></i>
                        </button>
                    </div>
                    <div class="calendar-body" id="calendarBody"></div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                <button type="button" class="btn btn-primary" id="confirmDate">تأكيد</button>
            </div>
        </div>
    </div>
</div>

<script>
// تمرير قائمة المواد من الخادم إلى الواجهة
window.materials = <%- JSON.stringify(typeof materials !== 'undefined' ? materials : []) %>;
const currencySymbol = '<%= (typeof defaultCurrency !== "undefined" && defaultCurrency && defaultCurrency.symbol) ? defaultCurrency.symbol : '' %>';
const defaultCurrencyCode = '<%= (typeof defaultCurrency !== "undefined" && defaultCurrency && defaultCurrency.code) ? defaultCurrency.code : '' %>';
const isSyp = defaultCurrencyCode === 'SYP';
let currentDateInput = null;
let selectedDate = null;
let currentMonth = new Date().getMonth();
let currentYear = new Date().getFullYear();

// أسماء الأشهر بالعربية
const monthNames = [
    'يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو',
    'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'
];

// أسماء أيام الأسبوع بالعربية
const dayNames = ['الأحد', 'الإثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت'];

// تهيئة التقويم
document.addEventListener('DOMContentLoaded', function() {
    initializeCalendar();
    setDefaultDates();
    
    // إضافة مستمعي الأحداث
    document.getElementById('prevMonth').addEventListener('click', function() {
        currentMonth--;
        if (currentMonth < 0) {
            currentMonth = 11;
            currentYear--;
        }
        renderCalendar();
    });
    
    document.getElementById('nextMonth').addEventListener('click', function() {
        currentMonth++;
        if (currentMonth > 11) {
            currentMonth = 0;
            currentYear++;
        }
        renderCalendar();
    });
    
    document.getElementById('monthSelect').addEventListener('change', function() {
        currentMonth = parseInt(this.value) - 1;
        renderCalendar();
    });
    
    document.getElementById('yearSelect').addEventListener('change', function() {
        currentYear = parseInt(this.value);
        renderCalendar();
    });
    
    document.getElementById('confirmDate').addEventListener('click', function() {
        if (selectedDate) {
            const day = selectedDate.getDate().toString().padStart(2, '0');
            const month = (selectedDate.getMonth() + 1).toString().padStart(2, '0');
            const year = selectedDate.getFullYear();
            const formattedDate = `${day}/${month}/${year}`;
            
            if (currentDateInput) currentDateInput.value = formattedDate;
            
            const modal = bootstrap.Modal.getInstance(document.getElementById('datePickerModal'));
            modal.hide();
        }
    });
});

// دالة تهيئة التقويم
function initializeCalendar() {
    // ملء قائمة السنوات
    const yearSelect = document.getElementById('yearSelect');
    const currentYear = new Date().getFullYear();
    
    for (let year = currentYear - 10; year <= currentYear + 5; year++) {
        const option = document.createElement('option');
        option.value = year;
        option.textContent = year;
        yearSelect.appendChild(option);
    }
    
    // تعيين القيم الحالية
    document.getElementById('monthSelect').value = currentMonth + 1;
    document.getElementById('yearSelect').value = currentYear;
    
    renderCalendar();
}

// دالة عرض التقويم
function renderCalendar() {
    const calendarBody = document.getElementById('calendarBody');
    const currentMonthYear = document.getElementById('currentMonthYear');
    
    // تحديث العنوان
    currentMonthYear.textContent = `${monthNames[currentMonth]} ${currentYear}`;
    
    // تحديث قوائم الاختيار
    document.getElementById('monthSelect').value = currentMonth + 1;
    document.getElementById('yearSelect').value = currentYear;
    
    // إنشاء التقويم
    const firstDay = new Date(currentYear, currentMonth, 1);
    const lastDay = new Date(currentYear, currentMonth + 1, 0);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - firstDay.getDay());
    
    let calendarHTML = '<div class="calendar-grid">';
    
    // أيام الأسبوع
    dayNames.forEach(day => {
        calendarHTML += `<div class="calendar-day-header">${day}</div>`;
    });
    
    // أيام الشهر
    for (let i = 0; i < 42; i++) {
        const date = new Date(startDate);
        date.setDate(startDate.getDate() + i);
        
        const isCurrentMonth = date.getMonth() === currentMonth;
        const isToday = date.toDateString() === new Date().toDateString();
        const isSelected = selectedDate && date.toDateString() === selectedDate.toDateString();
        
        let className = 'calendar-day';
        if (!isCurrentMonth) className += ' other-month';
        if (isToday) className += ' today';
        if (isSelected) className += ' selected';
        
        calendarHTML += `<div class="${className}" onclick="selectDate(new Date(${date.getTime()}))">${date.getDate()}</div>`;
    }
    
    calendarHTML += '</div>';
    calendarBody.innerHTML = calendarHTML;
}

// دالة اختيار التاريخ
function selectDate(date) {
    selectedDate = date;
    renderCalendar();
}

// دالة فتح التقويم
function openDatePicker(inputId) {
    currentDateInput = document.getElementById(inputId);
    const modal = new bootstrap.Modal(document.getElementById('datePickerModal'));
    modal.show();
}

// دالة تعيين التواريخ الافتراضية
function setDefaultDates() {
    const today = new Date();
    const day = today.getDate().toString().padStart(2, '0');
    const month = (today.getMonth() + 1).toString().padStart(2, '0');
    const year = today.getFullYear();
    const formattedDate = `${day}/${month}/${year}`;
    
    const orderDate = document.getElementById('orderDateInput');
    if (orderDate) orderDate.value = formattedDate;
    const deliveryDate = document.getElementById('deliveryDateInput');
    if (deliveryDate) deliveryDate.value = formattedDate;
}

// دالة تنسيق التاريخ
function formatDate(dateString) {
    if (!dateString) return '-';
    const date = new Date(dateString);
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
}

// دالة تعديل الطلبية
function editOrder(orderId) {
    // جلب بيانات الطلبية
    fetch(`/costs/orders/${orderId}`)
        .then(response => response.json())
        .then(data => {
            if (!data.success) throw new Error('LOAD_FAILED');
            const order = data.order;
            const items = Array.isArray(data.items) ? data.items : [];

            document.getElementById('editOrderId').value = order.id;
            document.getElementById('editClientName').value = order.client_name || '';
            document.getElementById('editClientPhone').value = order.client_phone || '';
            document.getElementById('editClientAddress').value = order.client_address || '';
            document.getElementById('editOrderDate').value = formatDate(order.order_date);
            document.getElementById('editDeliveryDate').value = formatDate(order.delivery_date);
            document.getElementById('editResponsibleWorker').value = order.responsible_worker || '';
            document.getElementById('editQualityController').value = order.quality_controller || '';
            document.getElementById('editPalletsCount').value = order.pallets_count || '';
            document.getElementById('editContainerNumber').value = order.container_number || '';
            document.getElementById('editPackagesCount').value = order.packages_count || '';
            document.getElementById('editWaybillNumber').value = order.waybill_number || '';
            document.getElementById('editAccreditationNumber').value = order.accreditation_number || '';
            document.getElementById('editNotes').value = order.notes || '';

            // تعبئة مواد الطلبية
            const tbody = document.getElementById('editOrderItemsBody');
            tbody.innerHTML = '';
            items.forEach(it => addEditOrderItemRow(it));
            
            const modal = new bootstrap.Modal(document.getElementById('editOrderModal'));
            modal.show();
        })
        .catch(error => {
            showAlert('حدث خطأ في جلب بيانات الطلبية', 'error');
        });
}

// دالة حفظ تعديل الطلبية
function saveOrderEdit() {
    const formData = new FormData(document.getElementById('editOrderForm'));
    const orderId = document.getElementById('editOrderId').value;
    const items = collectEditOrderItems();
    
    fetch(`/costs/orders/${orderId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            client_name: formData.get('client_name'),
            order_date: formData.get('order_date'),
            client_phone: formData.get('client_phone'),
            client_address: formData.get('client_address'),
            delivery_date: formData.get('delivery_date'),
            responsible_worker: formData.get('responsible_worker'),
            quality_controller: formData.get('quality_controller'),
            pallets_count: parseInt(formData.get('pallets_count')||'')||null,
            container_number: formData.get('container_number'),
            packages_count: parseInt(formData.get('packages_count')||'')||null,
            waybill_number: formData.get('waybill_number'),
            accreditation_number: formData.get('accreditation_number'),
            notes: formData.get('notes')
            ,items
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showAlert('تم تحديث الطلبية بنجاح', 'success');
            setTimeout(() => window.location.reload(), 1500);
        } else {
            showAlert(data.message || 'حدث خطأ في تحديث الطلبية', 'error');
        }
    })
    .catch(error => {
        showAlert('حدث خطأ في تحديث الطلبية', 'error');
    });
}

// تحديث حالة الطلبية
function updateOrderStatus(orderId, status) {
    const statusText = {
        'pending': 'قيد الانتظار',
        'processing': 'قيد المعالجة',
        'completed': 'مكتمل',
        'cancelled': 'ملغي'
    };
    
    if (confirm(`هل تريد تغيير حالة الطلبية إلى "${statusText[status]}"؟`)) {
        fetch(`/costs/orders/${orderId}/status`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showAlert('تم تحديث حالة الطلبية بنجاح', 'success');
                setTimeout(() => window.location.reload(), 1500);
            } else {
                showAlert(data.message || 'حدث خطأ في تحديث حالة الطلبية', 'error');
            }
        })
        .catch(error => {
            showAlert('حدث خطأ في تحديث حالة الطلبية', 'error');
        });
    }
}

// حذف طلبية
function deleteOrder(id) {
    if (confirm('هل أنت متأكد من حذف هذه الطلبية؟')) {
        fetch(`/costs/orders/${id}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showAlert('تم حذف الطلبية بنجاح', 'success');
                setTimeout(() => window.location.reload(), 1500);
            } else {
                showAlert(data.message || 'حدث خطأ في حذف الطلبية', 'error');
            }
        })
        .catch(error => {
            showAlert('حدث خطأ في حذف الطلبية', 'error');
        });
    }
}

// معالجة نموذج إنشاء الطلبية
document.getElementById('orderForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const items = collectOrderItems();
    
    fetch('/costs/orders', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            client_name: formData.get('client_name'),
            order_date: formData.get('order_date'),
            delivery_date: formData.get('delivery_date'),
            responsible_worker: formData.get('responsible_worker'),
            quality_controller: formData.get('quality_controller'),
            pallets_count: parseInt(formData.get('pallets_count')||'')||null,
            container_number: formData.get('container_number'),
            packages_count: parseInt(formData.get('packages_count')||'')||null,
            waybill_number: formData.get('waybill_number'),
            accreditation_number: formData.get('accreditation_number'),
            notes: formData.get('notes'),
            items
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showAlert('تم إنشاء الطلبية بنجاح', 'success');
            this.reset();
            setTimeout(() => window.location.reload(), 1500);
        } else {
            showAlert(data.message || 'حدث خطأ في إنشاء الطلبية', 'error');
        }
    })
    .catch(error => {
        showAlert('حدث خطأ في إنشاء الطلبية', 'error');
    });
});

// دالة عرض التنبيهات
function showAlert(message, type) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show`;
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.querySelector('.container').insertBefore(alertDiv, document.querySelector('.container').firstChild);
    
    // إزالة التنبيه تلقائياً بعد 5 ثوان
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.remove();
        }
    }, 5000);
}

// مواد الطلبية: إضافة/حذف/جمع
function addOrderItemRow(){
  const tbody = document.getElementById('orderItemsBody');
  const tr = document.createElement('tr');
  const materialOptions = (window.materials || []).map(m => `<option value="${m.id}" data-unit="${m.packaging_unit||''}" data-weight="${m.gross_package_weight!=null?m.gross_package_weight:''}">${m.material_name}</option>`).join('');
  tr.innerHTML = `
    <td>
      <select class="form-select order-material" onchange="onOrderMaterialChange(this)">
        <option value="">اختر المادة</option>
        ${materialOptions}
      </select>
    </td>
    <td><input type="text" class="form-control order-unit" readonly></td>
    <td><input type="number" class="form-control order-qty" step="0.001" min="0" oninput="onOrderCalcRow(this)"></td>
    <td><input type="number" class="form-control order-weight" step="0.001" min="0" readonly></td>
    <td><input type="number" class="form-control order-volume" step="0.001" min="0"></td>
    <td>
      <div class="input-group">
        <input type="number" class="form-control order-unit-price" step="0.01" min="0" placeholder="اختياري" oninput="onOrderCalcRow(this)">
        <span class="input-group-text">${currencySymbol}</span>
      </div>
    </td>
    <td>
      <div class="input-group">
        <input type="number" class="form-control order-total-price" step="0.01" min="0" readonly>
        <span class="input-group-text">${currencySymbol}</span>
      </div>
    </td>
    <td><input type="text" class="form-control order-notes"></td>
    <td><button type="button" class="btn btn-sm btn-danger" onclick="this.closest('tr').remove()"><i class="bi bi-trash"></i></button></td>
  `;
  tbody.appendChild(tr);
}

function onOrderMaterialChange(selectEl){
  const tr = selectEl.closest('tr');
  const opt = selectEl.selectedOptions[0];
  const unit = opt?.getAttribute('data-unit')||'';
  tr.querySelector('.order-unit').value = unit;
  const w = opt?.getAttribute('data-weight');
  tr.querySelector('.order-weight').value = w ? parseFloat(w).toFixed(3) : '';
}

function collectOrderItems(){
  const items = [];
  document.querySelectorAll('#orderItemsBody tr').forEach(tr =>{
    const sel = tr.querySelector('.order-material');
    const materialId = sel && sel.value ? parseInt(sel.value) : null;
    const materialName = sel && sel.selectedOptions[0] ? sel.selectedOptions[0].textContent.trim() : '';
    const unit = tr.querySelector('.order-unit')?.value || null;
    const qty = parseFloat(tr.querySelector('.order-qty')?.value||'');
    const weight = parseFloat(tr.querySelector('.order-weight')?.value||'');
    const volume = parseFloat(tr.querySelector('.order-volume')?.value||'');
    const unitPrice = parseFloat(tr.querySelector('.order-unit-price')?.value||'');
    const totalPrice = (!isNaN(unitPrice) && !isNaN(qty)) ? (unitPrice * qty) : null;
    const notes = tr.querySelector('.order-notes')?.value || null;
    if (materialId || materialName){
      items.push({
        material_id: materialId,
        material_name: materialName,
        unit,
        requested_quantity: isNaN(qty)? null : qty,
        weight: isNaN(weight)? null : weight,
        volume: isNaN(volume)? null : volume,
        unit_price: isNaN(unitPrice)? null : unitPrice,
        total_price: totalPrice,
        notes
      });
    }
  });
  return items;
}

function onOrderCalcRow(el){
  const tr = el.closest('tr');
  const qty = parseFloat(tr.querySelector('.order-qty')?.value||'');
  const unitPrice = parseFloat(tr.querySelector('.order-unit-price')?.value||'');
  const totalEl = tr.querySelector('.order-total-price');
  if (totalEl){
    if (!isNaN(qty) && !isNaN(unitPrice)) totalEl.value = (qty * unitPrice).toFixed(2);
    else totalEl.value = '';
  }
}

// مواد الطلبية (التعديل)
function addEditOrderItemRow(item){
  const tbody = document.getElementById('editOrderItemsBody');
  const tr = document.createElement('tr');
  const materials = Array.isArray(window.materials) ? window.materials : [];
  const materialOptions = materials.map(m => `<option value="${m.id}" data-unit="${m.packaging_unit||''}" data-weight="${m.gross_package_weight!=null?m.gross_package_weight:''}">${m.material_name}</option>`).join('');
  const selectedId = item && item.material_id ? String(item.material_id) : '';
  const selectedUnit = item && item.unit ? item.unit : '';
  const selectedName = item && item.material_name ? item.material_name : '';

  tr.innerHTML = `
    <td>
      <select class="form-select edit-order-material" onchange="onEditOrderMaterialChange(this)">
        <option value="">اختر المادة</option>
        ${materialOptions}
      </select>
    </td>
    <td><input type="text" class="form-control edit-order-unit" value="${selectedUnit}" readonly></td>
    <td><input type="number" class="form-control edit-order-qty" step="0.001" min="0" value="${item && item.requested_quantity != null ? item.requested_quantity : ''}"></td>
    <td><input type="number" class="form-control edit-order-weight" step="0.001" min="0" value="${item && item.weight != null ? item.weight : ''}" readonly></td>
    <td><input type="number" class="form-control edit-order-volume" step="0.001" min="0" value="${item && item.volume != null ? item.volume : ''}"></td>
    <td>
      <div class="input-group">
        <input type="number" class="form-control edit-order-unit-price" step="0.01" min="0" value="${item && item.unit_price != null ? item.unit_price : ''}" oninput="onEditOrderCalcRow(this)">
        <span class="input-group-text">${currencySymbol}</span>
      </div>
    </td>
    <td>
      <div class="input-group">
        <input type="number" class="form-control edit-order-total-price" step="0.01" min="0" value="${item && item.total_price != null ? item.total_price : ''}" readonly>
        <span class="input-group-text">${currencySymbol}</span>
      </div>
    </td>
    <td><input type="text" class="form-control edit-order-notes" value="${item && item.notes ? item.notes : ''}"></td>
    <td><button type="button" class="btn btn-sm btn-danger" onclick="this.closest('tr').remove()"><i class="bi bi-trash"></i></button></td>
  `;

  tbody.appendChild(tr);

  const selectEl = tr.querySelector('.edit-order-material');
  if (selectedId && Array.from(selectEl.options).some(o => o.value === selectedId)){
    selectEl.value = selectedId;
    const unit = selectEl.selectedOptions[0]?.getAttribute('data-unit')||'';
    tr.querySelector('.edit-order-unit').value = unit || selectedUnit;
  } else if (selectedName){
    // مادة غير موجودة في القائمة، أضفها مؤقتاً
    const opt = document.createElement('option');
    opt.value = '';
    opt.textContent = selectedName;
    opt.selected = true;
    selectEl.appendChild(opt);
    tr.querySelector('.edit-order-unit').value = selectedUnit;
  }
}

function onEditOrderMaterialChange(selectEl){
  const tr = selectEl.closest('tr');
  const opt = selectEl.selectedOptions[0];
  const unit = opt?.getAttribute('data-unit')||'';
  tr.querySelector('.edit-order-unit').value = unit;
  const w = opt?.getAttribute('data-weight');
  const weightEl = tr.querySelector('.edit-order-weight');
  if (w && weightEl) weightEl.value = parseFloat(w).toFixed(3);
  onEditOrderCalcRow(tr.querySelector('.edit-order-qty'));
}

function collectEditOrderItems(){
  const items = [];
  document.querySelectorAll('#editOrderItemsBody tr').forEach(tr =>{
    const sel = tr.querySelector('.edit-order-material');
    const materialId = sel && sel.value ? parseInt(sel.value) : null;
    const materialName = sel && sel.selectedOptions[0] ? sel.selectedOptions[0].textContent.trim() : '';
    const unit = tr.querySelector('.edit-order-unit')?.value || null;
    const qtyVal = parseFloat(tr.querySelector('.edit-order-qty')?.value||'');
    const weight = parseFloat(tr.querySelector('.edit-order-weight')?.value||'');
    const volume = parseFloat(tr.querySelector('.edit-order-volume')?.value||'');
    const unitPrice = parseFloat(tr.querySelector('.edit-order-unit-price')?.value||'');
    const qty = qtyVal;
    const totalPrice = (!isNaN(unitPrice) && !isNaN(qty)) ? (unitPrice * qty) : null;
    const notes = tr.querySelector('.edit-order-notes')?.value || null;
    if (materialId || materialName){
      items.push({
        material_id: materialId,
        material_name: materialName,
        unit,
        requested_quantity: isNaN(qty)? null : qty,
        weight: isNaN(weight)? null : weight,
        volume: isNaN(volume)? null : volume,
        unit_price: isNaN(unitPrice)? null : unitPrice,
        total_price: totalPrice,
        notes
      });
    }
  });
  return items;
}

function onEditOrderCalcRow(el){
  const tr = el.closest('tr');
  const qty = parseFloat(tr.querySelector('.edit-order-qty')?.value||'');
  const unitPrice = parseFloat(tr.querySelector('.edit-order-unit-price')?.value||'');
  const totalEl = tr.querySelector('.edit-order-total-price');
  if (totalEl){
    if (!isNaN(qty) && !isNaN(unitPrice)) totalEl.value = (qty * unitPrice).toFixed(2);
    else totalEl.value = '';
  }
}
</script>

<style>
.calendar-container {
    text-align: center;
}

.calendar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
}

.calendar-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 1px;
    background-color: #dee2e6;
    border: 1px solid #dee2e6;
}

.calendar-day-header {
    background-color: #f8f9fa;
    padding: 0.5rem;
    font-weight: bold;
    font-size: 0.875rem;
}

.calendar-day {
    background-color: white;
    padding: 0.5rem;
    cursor: pointer;
    transition: background-color 0.2s;
}

.calendar-day:hover {
    background-color: #e9ecef;
}

.calendar-day.other-month {
    color: #6c757d;
}

.calendar-day.today {
    background-color: #007bff;
    color: white;
}

.calendar-day.selected {
    background-color: #28a745;
    color: white;
}

.calendar-day.selected:hover {
    background-color: #218838;
}
</style> 