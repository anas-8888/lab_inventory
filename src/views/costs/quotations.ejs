<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="bi bi-file-earmark-text"></i> عروض الأسعار</h2>
                <div class="d-flex gap-2">
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createQuotationModal">
                        <i class="bi bi-plus-circle me-1"></i> إضافة عرض سعر
                    </button>
                <a href="/costs" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-right me-1"></i> العودة للتكاليف
                </a>
                </div>
            </div>

            <!-- Modal إنشاء عرض سعر جديد -->
            <div class="modal fade" id="createQuotationModal" tabindex="-1">
              <div class="modal-dialog modal-xl">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-plus-circle"></i> إنشاء عرض سعر جديد</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="إغلاق"></button>
                </div>
                  <div class="modal-body">
                    <form id="quotationForm" method="POST" action="/costs/quotations">
                        <!-- بيانات العميل -->
                        <div class="row g-3 mb-4">
                            <div class="col-md-6">
                                <label class="form-label">اسم العميل *</label>
                                <input type="text" class="form-control" name="client_name" required>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">رقم الهاتف</label>
                                <input type="text" class="form-control" name="client_phone">
                            </div>
                            <div class="col-md-12">
                                <label class="form-label">العنوان</label>
                                <textarea class="form-control" name="client_address" rows="2"></textarea>
                            </div>
                            <div class="col-md-12">
                                <label class="form-label">ملاحظات</label>
                                <textarea class="form-control" name="notes" rows="2"></textarea>
                            </div>
                        </div>

                        <!-- اختيار المواد -->
                        <div class="mb-2">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h6 class="mb-0">اختيار المواد</h6>
                                <div>
                                <button type="button" class="btn btn-outline-primary btn-sm" onclick="addMaterialRow()">
                                    <i class="bi bi-plus"></i> إضافة مادة
                                </button>
                                </div>
                            </div>
                            <div class="table-responsive">
                                <table class="table table-bordered" id="materialsTable">
                                    <thead>
                                        <tr>
                                            <th style="width: 30%; min-width: 250px;">المادة</th>
                                            <th style="width: 12%;">كلفة الطرد</th>
                                            <th style="width: 12%;">نسبة الربح (%)</th>
                                            <th style="width: 12%;">السعر النهائي</th>
                                            <th style="width: 8%;">الكمية</th>
                                            <th style="width: 12%;">المجموع</th>
                                            <th style="width: 10%;">ملاحظات</th>
                                            <th style="width: 4%;">الإجراءات</th>
                                        </tr>
                                    </thead>
                                    <tbody id="materialsTableBody">
                                        <!-- سيتم إضافة الصفوف ديناميكياً -->
                                    </tbody>
                                    <tfoot>
                                        <tr class="table-info">
                                            <td colspan="5" class="text-end"><strong>المجموع الإجمالي:</strong></td>
                                            <td><strong id="totalAmount">0.00 <%= defaultCurrency ? defaultCurrency.symbol : '$' %></strong></td>
                                            <td></td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        </div>
                    </form>
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="submit" form="quotationForm" class="btn btn-primary">
                                <i class="bi bi-save me-1"></i> حفظ عرض السعر
                            </button>
                        </div>
                </div>
                </div>
            </div>

            <!-- جدول عروض الأسعار الموجودة -->
            <% if (quotations && quotations.length > 0) { %>
            <div class="card shadow">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-list-ul"></i> عروض الأسعار المسجلة</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>رقم العرض</th>
                                    <th>اسم العميل</th>
                                    <th>عدد المواد</th>
                                    <th>المبلغ الإجمالي</th>
                                    <th>التاريخ</th>
                                    <th>الإجراءات</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% quotations.forEach(quotation => { %>
                                <tr>
                                    <td><%= quotation.quotation_number %></td>
                                    <td><%= quotation.client_name %></td>
                                    <td><%= quotation.items_count %></td>
                                    <td>
                                        <%= (defaultCurrency && defaultCurrency.code === 'SYP')
                                            ? String(Math.round(parseFloat(quotation.total_amount) || 0))
                                            : (parseFloat(quotation.total_amount) || 0).toFixed(2)
                                        %> <%= defaultCurrency ? defaultCurrency.symbol : '$' %>
                                    </td>
                                    <td><%= formatDate(quotation.created_at) %></td>
                                    <td>
                                        <div class="btn-group">
                                            <a href="/costs/quotations/<%= quotation.id %>" class="btn btn-sm btn-info" title="معاينة">
                                                <i class="bi bi-eye"></i>
                                            </a>
                                            <button type="button" class="btn btn-sm btn-primary" onclick="openEditQuotationModal(<%= quotation.id %>)" title="تعديل">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-danger" onclick="deleteQuotation(<%= quotation.id %>)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                <% }); %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <% } else { %>
            <div class="card shadow">
              <div class="card-body text-center py-5">
                <i class="bi bi-file-earmark-text fs-1 text-muted mb-3"></i>
                <h5 class="mb-2">لا توجد عروض أسعار حتى الآن</h5>
                <p class="text-muted">ابدأ بإنشاء أول عرض سعر من خلال الزر أدناه.</p>
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createQuotationModal">
                  <i class="bi bi-plus-circle me-1"></i> إضافة عرض سعر
                </button>
                </div>
            </div>
            <% } %>
        </div>
    </div>
</div>

<!-- Modal تعديل عرض السعر -->
<div class="modal fade" id="editQuotationModal" tabindex="-1">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">تعديل عرض السعر</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="إغلاق"></button>
      </div>
      <div class="modal-body">
        <form id="editQuotationForm">
          <input type="hidden" id="editQuotationId">
          <div class="row g-3 mb-3">
            <div class="col-md-6">
              <label class="form-label">اسم العميل</label>
              <input type="text" class="form-control" id="editClientName" required>
            </div>
            <div class="col-md-6">
              <label class="form-label">رقم الهاتف</label>
              <input type="text" class="form-control" id="editClientPhone">
            </div>
            <div class="col-12">
              <label class="form-label">العنوان</label>
              <textarea class="form-control" id="editClientAddress" rows="2"></textarea>
            </div>
            <div class="col-12">
              <label class="form-label">ملاحظات</label>
              <textarea class="form-control" id="editNotes" rows="2"></textarea>
            </div>
          </div>

          <div class="d-flex justify-content-between align-items-center mb-2">
            <h6 class="mb-0">تعديل المواد</h6>
            <button type="button" class="btn btn-outline-primary btn-sm" onclick="addEditMaterialRow()">
              <i class="bi bi-plus"></i> إضافة مادة
            </button>
          </div>
          <div class="table-responsive">
            <table class="table table-bordered" id="editItemsTable">
              <thead>
                <tr>
                  <th style="width: 30%; min-width: 250px;">المادة</th>
                  <th style="width: 12%;">كلفة الطرد</th>
                  <th style="width: 12%;">نسبة الربح (%)</th>
                  <th style="width: 12%;">السعر النهائي</th>
                  <th style="width: 8%;">الكمية</th>
                  <th style="width: 12%;">المجموع</th>
                  <th style="width: 14%;">الإجراءات</th>
                </tr>
              </thead>
              <tbody id="editItemsBody"></tbody>
              <tfoot>
                <tr class="table-info">
                  <td colspan="5" class="text-end"><strong>المجموع الإجمالي:</strong></td>
                  <td>
                    <strong id="editTotalAmount">0.00 <%= defaultCurrency ? defaultCurrency.symbol : '$' %></strong>
                  </td>
                  <td></td>
                </tr>
              </tfoot>
            </table>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
        <button type="button" class="btn btn-primary" onclick="saveEditQuotation()">حفظ التعديلات</button>
      </div>
        </div>
    </div>
</div>

<script>
// تحسين إمكانية الوصول للمودالات
document.addEventListener('DOMContentLoaded', function() {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        // إزالة aria-hidden من جميع المودالات لمنع تضارب التركيز
        modal.removeAttribute('aria-hidden');
        
        // إضافة inert attribute بدلاً من aria-hidden
        modal.addEventListener('show.bs.modal', function() {
            this.removeAttribute('inert');
        });
        
        modal.addEventListener('hidden.bs.modal', function() {
            this.setAttribute('inert', '');
            // إزالة backdrop المعلق
            const backdrops = document.querySelectorAll('.modal-backdrop');
            backdrops.forEach(backdrop => {
                backdrop.remove();
            });
            // إزالة overflow: hidden من body
            document.body.classList.remove('modal-open');
            document.body.style.overflow = '';
            document.body.style.paddingRight = '';
        });
        
        modal.addEventListener('shown.bs.modal', function() {
            // التركيز على أول عنصر قابل للتركيز بعد فتح المودال
            setTimeout(() => {
                const firstFocusable = this.querySelector('input:not([readonly]):not([disabled]), button:not([disabled]), select:not([disabled]), textarea:not([readonly]):not([disabled])');
                if (firstFocusable) {
                    firstFocusable.focus();
                }
            }, 100);
        });
        
        // منع Bootstrap من إضافة aria-hidden باستخدام MutationObserver أكثر فعالية
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.type === 'attributes' && mutation.attributeName === 'aria-hidden') {
                    // إزالة aria-hidden فوراً
                    modal.removeAttribute('aria-hidden');
                    // إضافة inert بدلاً منه إذا كان المودال مخفي
                    if (!modal.classList.contains('show')) {
                        modal.setAttribute('inert', '');
                    }
                }
            });
        });
        
        observer.observe(modal, {
            attributes: true,
            attributeFilter: ['aria-hidden']
        });
        
        // إضافة inert للمودالات المخفية عند التحميل
        if (!modal.classList.contains('show')) {
            modal.setAttribute('inert', '');
        }
    });
    
    // إضافة مستمع عام لإزالة backdrop المعلق
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal-backdrop')) {
            e.target.remove();
            document.body.classList.remove('modal-open');
            document.body.style.overflow = '';
            document.body.style.paddingRight = '';
        }
    });
    
    // إزالة backdrop المعلق عند تحميل الصفحة
    const stuckBackdrops = document.querySelectorAll('.modal-backdrop');
    stuckBackdrops.forEach(backdrop => {
        backdrop.remove();
    });
    document.body.classList.remove('modal-open');
    document.body.style.overflow = '';
    document.body.style.paddingRight = '';
});

// دالة إزالة backdrop المعلق
function removeStuckBackdrop() {
    const backdrops = document.querySelectorAll('.modal-backdrop');
    backdrops.forEach(backdrop => {
        backdrop.remove();
    });
    document.body.classList.remove('modal-open');
    document.body.style.overflow = '';
    document.body.style.paddingRight = '';
}

const exchangeRate = <%= exchangeRate %>;
const defaultCurrencyCode = '<%= defaultCurrency ? defaultCurrency.code : "USD" %>';
const formatUSD = (v) => (parseFloat(v) || 0).toFixed(2);
const formatSYP = (v) => String(Math.round(parseFloat(v) || 0));
const displayMoney = (v) => {
  const value = parseFloat(v) || 0;
  return defaultCurrencyCode === 'SYP' ? formatSYP(value) : formatUSD(value);
};

// دالة لتقريب الأرقام العشرية بشكل صحيح
const roundToDecimal = (value, decimals = 2) => {
  return Math.round(value * Math.pow(10, decimals)) / Math.pow(10, decimals);
};
// المواد المتاحة
const materials = <%- JSON.stringify(materials || []) %>;
let materialRows = [];
let nextRowId = 0;

// إضافة صف مادة جديد
function addMaterialRow() {
    const tbody = document.getElementById('materialsTableBody');
    const rowId = nextRowId++;
    
    const row = document.createElement('tr');
    row.setAttribute('data-row-id', rowId);
    row.innerHTML = `
        <td style="width: 30%; min-width: 250px;">
            <select class="form-select material-select" onchange="updateMaterialData(${rowId}, this.value)" style="width: 100%;">
                <option value="">اختر المادة</option>
                 ${materials.map(m => `<option value="${m.id}" 
                    data-type="${m.material_type||''}"
                    data-unit="${m.packaging_unit||''}"
                    data-weight="${m.packaging_weight||0}"
                    data-pieces="${m.pieces_per_package||1}"
                    data-package-cost="${m.package_cost}"
                    title="${m.material_name}">
                    ${m.material_name}
                 </option>`).join('')}
            </select>
        </td>
        <td>
            <input type="number" class="form-control unit-cost" readonly>
        </td>
        <td>
            <input type="number" class="form-control profit-percentage" step="0.01" value="0" onchange="calculateRowTotal(${rowId})">
        </td>
        <td>
            <input type="number" class="form-control final-price" step="0.01" onchange="manualFinalPriceChange(${rowId}, this)">
        </td>
        <td>
            <input type="number" class="form-control quantity" value="1" min="1" onchange="calculateRowTotal(${rowId})">
        </td>
        <td>
            <input type="number" class="form-control row-total" readonly>
        </td>
        <td>
            <input type="text" class="form-control item-notes" placeholder="ملاحظات">
        </td>
        <td>
            <button type="button" class="btn btn-sm btn-danger" onclick="removeMaterialRow(${rowId})">
                <i class="bi bi-trash"></i>
            </button>
        </td>
    `;
    
    row.setAttribute('data-row-id', rowId);
    tbody.appendChild(row);
    materialRows[rowId] = {
        rowId: rowId,
        materialId: '',
        materialName: '',
        materialType: '',
        packagingUnit: '',
        packagingWeight: 0,
        piecesPerPackage: 1,
        unitCost: 0,
        profitPercentage: 0,
        finalPrice: 0,
        quantity: 1,
        totalPrice: 0,
        notes: ''
    };
}

// تحديث بيانات المادة
function updateMaterialData(rowId, materialId) {
    const material = materials.find(m => m.id == materialId);
    if (!material) return;
    
    const row = materialRows[rowId];
    if (!row) return;
    
    row.materialId = material.id;
    row.materialName = material.material_name;
    row.materialType = material.material_type || '';
    row.packagingUnit = material.packaging_unit || '';
    row.packagingWeight = material.packaging_weight || '0';
    row.piecesPerPackage = parseInt(material.pieces_per_package) || 1;
    row.unitCost = parseFloat(material.package_cost);
    
    const tr = document.querySelector(`#materialsTableBody tr[data-row-id="${rowId}"]`);
    if (tr) {
        tr.querySelector('.unit-cost').value = displayMoney(material.package_cost);
    }
    
    calculateRowTotal(rowId);
}

// حساب مجموع الصف
function calculateRowTotal(rowIndex) {
    const row = materialRows[rowIndex];
    const tr = document.querySelector(`#materialsTableBody tr:nth-child(${rowIndex + 1})`);
    
    const profitPercentage = parseFloat(tr.querySelector('.profit-percentage').value) || 0;
    const quantity = parseFloat(tr.querySelector('.quantity').value) || 1; // تغيير من parseInt إلى parseFloat
    
    row.profitPercentage = profitPercentage;
    row.quantity = quantity;
    
    // إذا كان السعر النهائي قد تم إدخاله يدوياً، احتفظ به
    const manualFinalPrice = parseFloat(tr.querySelector('.final-price').value.replace(/,/g, '')) || 0;
    let finalPrice;
    
    if (manualFinalPrice > 0) {
        // إذا كان هناك سعر نهائي مدخل يدوياً، استخدمه
        finalPrice = manualFinalPrice;
        // أعد حساب نسبة الربح بناءً على السعر النهائي المدخل
        const newProfitPercentage = row.unitCost > 0 ? ((finalPrice / row.unitCost) - 1) * 100 : 0;
        row.profitPercentage = newProfitPercentage;
        tr.querySelector('.profit-percentage').value = roundToDecimal(newProfitPercentage, 2).toFixed(2);
    } else {
        // إذا لم يكن هناك سعر نهائي مدخل يدوياً، احسبه من نسبة الربح
        finalPrice = roundToDecimal(row.unitCost * (1 + profitPercentage / 100), defaultCurrencyCode === 'SYP' ? 0 : 2);
    }
    
    const totalPrice = roundToDecimal(finalPrice * quantity, defaultCurrencyCode === 'SYP' ? 0 : 2);
    
    row.finalPrice = finalPrice;
    row.totalPrice = totalPrice;
    
    tr.querySelector('.final-price').value = displayMoney(finalPrice);
    tr.querySelector('.row-total').value = displayMoney(totalPrice);
    
    calculateTotalAmount();
}

// تغيير يدوي للسعر النهائي مع مزامنة نسبة الربح
function manualFinalPriceChange(rowId, inputEl){
  const tr = inputEl.closest('tr');
  const row = materialRows[rowId];
  if (!row) return;
  
  const finalPrice = parseFloat(inputEl.value) || 0;
  const profit = row.unitCost > 0 ? ((finalPrice / row.unitCost) - 1) * 100 : 0;
  row.finalPrice = finalPrice;
  row.profitPercentage = profit;
  tr.querySelector('.profit-percentage').value = roundToDecimal(profit, 2).toFixed(2);
  const quantity = parseFloat(tr.querySelector('.quantity').value) || 1; // تغيير من parseInt إلى parseFloat
  row.quantity = quantity;
  row.totalPrice = roundToDecimal(finalPrice * quantity, defaultCurrencyCode === 'SYP' ? 0 : 2);
  tr.querySelector('.row-total').value = displayMoney(row.totalPrice);
  
  
  calculateTotalAmount();
}

// حساب المجموع الإجمالي
function calculateTotalAmount() {
    const total = roundToDecimal(Object.values(materialRows).reduce((sum, row) => {
        return row ? sum + (row.totalPrice || 0) : sum;
    }, 0), defaultCurrencyCode === 'SYP' ? 0 : 2);
    document.getElementById('totalAmount').textContent = displayMoney(total) + ' <%= defaultCurrency ? defaultCurrency.symbol : "$" %>';
}
// فتح مودال تعديل
function openEditQuotationModal(id) {
  fetch(`/costs/quotations/${id}/json`).then(r=>r.json()).then(data=>{
    if(!data.success) return showAlert(data.message||'تعذر جلب العرض','error');
    const q = data.quotation;
    const items = data.items||[];
    document.getElementById('editQuotationId').value = q.id;
    document.getElementById('editClientName').value = q.client_name||'';
    document.getElementById('editClientPhone').value = q.client_phone||'';
    document.getElementById('editClientAddress').value = q.client_address||'';
    document.getElementById('editNotes').value = q.notes||'';
    const tbody = document.getElementById('editItemsBody');
    tbody.innerHTML = '';
    items.forEach((it, idx)=>{
      const tr = document.createElement('tr');
      
      // استخدام القيم المحفوظة مباشرة بدلاً من إعادة حسابها
      let finalPrice, totalPrice;
      if (defaultCurrencyCode === 'SYP') {
        // لليرة السورية، استخدم القيم المحفوظة مباشرة
        finalPrice = parseFloat(it.final_price_syp) || parseFloat(it.final_price) || 0;
        totalPrice = parseFloat(it.total_price_syp) || parseFloat(it.total_price) || 0;
        
      } else {
        // للدولار، استخدم القيم المحفوظة مباشرة
        finalPrice = parseFloat(it.final_price) || 0;
        totalPrice = parseFloat(it.total_price) || 0;
      }
      
      
      tr.innerHTML = `
        <td style="width: 30%; min-width: 250px; word-wrap: break-word; white-space: normal;">${it.material_name}<input type="hidden" class="edit-material-id" value="${it.material_id||''}"></td>
        <td>
          <input type="number" class="form-control edit-unit-cost" value="${it.unit_cost}" readonly>
        </td>
        <td><input type="number" class="form-control edit-profit" step="0.01" value="${it.profit_percentage||0}" onchange="recalcEditRow(this)"></td>
        <td>
          <input type="number" class="form-control edit-final" value="${finalPrice}" onchange="manualEditFinalPriceChange(this)">
        </td>
        <td><input type="number" class="form-control edit-qty" value="${it.quantity}" min="1" onchange="recalcEditRow(this)"></td>
        <td>
          <input type="number" class="form-control edit-total" value="${totalPrice}" readonly>
        </td>
        <td><button type="button" class="btn btn-sm btn-danger" onclick="removeEditMaterialRow(this)"><i class="bi bi-trash"></i></button></td>`;
      
      // إضافة data attributes للبيانات المحفوظة
      tr.setAttribute('data-material-type', it.material_type || '');
      tr.setAttribute('data-packaging-unit', it.packaging_unit || '');
      tr.setAttribute('data-packaging-weight', it.packaging_weight || '0');
      tr.setAttribute('data-pieces-per-package', it.pieces_per_package || '1');
      
      tbody.appendChild(tr);
    });
    updateEditTotal();
    new bootstrap.Modal(document.getElementById('editQuotationModal')).show();
  }).catch(()=>showAlert('تعذر جلب العرض','error'))
}

function recalcEditRow(inputEl){
  const tr = inputEl.closest('tr');
  const unitCost = parseFloat(tr.querySelector('.edit-unit-cost').value)||0;
  const profit = parseFloat(tr.querySelector('.edit-profit').value)||0;
  const qty = parseFloat(tr.querySelector('.edit-qty').value)||1; // تغيير من parseInt إلى parseFloat
  
  // إذا كان السعر النهائي قد تم إدخاله يدوياً، احتفظ به
  const manualFinalPrice = parseFloat(tr.querySelector('.edit-final').value) || 0;
  let finalPrice;
  
  if (manualFinalPrice > 0) {
    // إذا كان هناك سعر نهائي مدخل يدوياً، استخدمه
    finalPrice = manualFinalPrice;
    // أعد حساب نسبة الربح بناءً على السعر النهائي المدخل
    const newProfit = unitCost > 0 ? ((finalPrice / unitCost) - 1) * 100 : 0;
    tr.querySelector('.edit-profit').value = roundToDecimal(newProfit, 2).toFixed(2);
  } else {
    // إذا لم يكن هناك سعر نهائي مدخل يدوياً، احسبه من نسبة الربح
    finalPrice = roundToDecimal(unitCost * (1 + profit/100), defaultCurrencyCode === 'SYP' ? 0 : 2);
  }
  
  const total = roundToDecimal(finalPrice * qty, defaultCurrencyCode === 'SYP' ? 0 : 2);
  
  
  tr.querySelector('.edit-final').value = finalPrice;
  tr.querySelector('.edit-total').value = total;
  
  updateEditTotal();
}

// تغيير يدوي للسعر النهائي في مودال التعديل مع مزامنة نسبة الربح
function manualEditFinalPriceChange(inputEl){
  const tr = inputEl.closest('tr');
  const unitCost = parseFloat(tr.querySelector('.edit-unit-cost').value)||0;
  const finalPrice = parseFloat(inputEl.value) || 0;
  const qty = parseFloat(tr.querySelector('.edit-qty').value) || 1; // تغيير من parseInt إلى parseFloat
  
  // حساب نسبة الربح الجديدة
  const profit = unitCost > 0 ? ((finalPrice / unitCost) - 1) * 100 : 0;
  
  // تحديث نسبة الربح
  tr.querySelector('.edit-profit').value = roundToDecimal(profit, 2).toFixed(2);
  
  // حساب المجموع الجديد
  const total = roundToDecimal(finalPrice * qty, defaultCurrencyCode === 'SYP' ? 0 : 2);
  tr.querySelector('.edit-total').value = total;
  
  updateEditTotal();
}



// إضافة صف مادة جديد داخل مودال التعديل
function addEditMaterialRow(){
  const tbody = document.getElementById('editItemsBody');
  const tr = document.createElement('tr');
  const materialOptions = materials.map(m => `<option value="${m.id}"
    data-pkg="${m.package_cost}"
    data-type="${m.material_type||''}"
    data-unit="${m.packaging_unit||''}"
    data-weight="${m.packaging_weight||0}"
    data-pieces="${m.pieces_per_package||1}">
    ${m.material_name}
  </option>`).join('');
  tr.innerHTML = `
    <td style="width: 30%; min-width: 250px;">
      <select class="form-select edit-material-select" onchange="onSelectEditMaterial(this)" style="width: 100%;">
        <option value="">اختر المادة</option>
        ${materialOptions}
      </select>
    </td>
    <td>
      <input type="number" class="form-control edit-unit-cost" readonly>
    </td>
    <td><input type="number" class="form-control edit-profit" step="0.01" value="0" onchange="recalcEditRow(this)"></td>
    <td>
      <input type="number" class="form-control edit-final" value="0" onchange="manualEditFinalPriceChange(this)">
    </td>
    <td><input type="number" class="form-control edit-qty" value="1" min="1" onchange="recalcEditRow(this)"></td>
    <td>
      <input type="number" class="form-control edit-total" value="0" readonly>
    </td>
    <td><input type="text" class="form-control edit-notes" placeholder="ملاحظات"></td>
    <td><button type="button" class="btn btn-sm btn-danger" onclick="removeEditMaterialRow(this)"><i class="bi bi-trash"></i></button></td>
  `;
  tbody.appendChild(tr);
}

function onSelectEditMaterial(selectEl){
  const tr = selectEl.closest('tr');
  const opt = selectEl.selectedOptions[0];
  const unit = parseFloat(opt?.getAttribute('data-pkg')||'0')||0;
  
  // تأكد من أن القيمة تُعرض بالعملة الصحيحة
  tr.querySelector('.edit-unit-cost').value = unit;
  
  // احفظ بيانات المادة المختارة
  tr.setAttribute('data-material-type', opt?.getAttribute('data-type')||'');
  tr.setAttribute('data-packaging-unit', opt?.getAttribute('data-unit')||'');
  tr.setAttribute('data-packaging-weight', opt?.getAttribute('data-weight')||'0');
  tr.setAttribute('data-pieces-per-package', opt?.getAttribute('data-pieces')||'1');
  // احفظ المعرّف المختار داخل صف التعديل
  let hidden = tr.querySelector('.edit-material-id');
  if (!hidden) {
    hidden = document.createElement('input');
    hidden.type = 'hidden';
    hidden.className = 'edit-material-id';
    tr.children[0].appendChild(hidden);
  }
  hidden.value = selectEl.value || '';
  recalcEditRow(tr.querySelector('.edit-profit'));
}

function removeEditMaterialRow(btn){
  const tr = btn.closest('tr');
  tr.remove();
  updateEditTotal();
}

function updateEditTotal(){
  let sum = 0;
  document.querySelectorAll('#editItemsBody .edit-total').forEach((i, idx)=>{
    const value = parseFloat(i.value) || 0;
    sum += value;
  });
  
  const total = roundToDecimal(sum, defaultCurrencyCode === 'SYP' ? 0 : 2);
  document.getElementById('editTotalAmount').textContent = total + ' <%= defaultCurrency ? defaultCurrency.symbol : "$" %>';
}

function saveEditQuotation(){
  const id = document.getElementById('editQuotationId').value;
  const payload = {
    client_name: document.getElementById('editClientName').value,
    client_phone: document.getElementById('editClientPhone').value,
    client_address: document.getElementById('editClientAddress').value,
    notes: document.getElementById('editNotes').value,
    currency: defaultCurrencyCode, // إرسال العملة الحالية
    items: []
  };
  document.querySelectorAll('#editItemsBody tr').forEach(tr=>{
    // استخراج اسم المادة ومعرّفها من الصف
    const select = tr.querySelector('.edit-material-select');
    const hiddenId = tr.querySelector('.edit-material-id');
    let materialId = null;
    let name = '';
    if (select) {
      materialId = select.value ? parseInt(select.value) : null;
      name = (select.selectedOptions[0]?.textContent || '').trim();
    } else {
      materialId = hiddenId && hiddenId.value ? parseInt(hiddenId.value) : null;
      name = (tr.children[0].childNodes[0]?.textContent || tr.children[0].textContent || '').trim();
    }
    const unitCost = parseFloat(tr.querySelector('.edit-unit-cost').value)||0;
    const profit = parseFloat(tr.querySelector('.edit-profit').value)||0;
    const finalPrice = parseFloat(tr.querySelector('.edit-final').value)||0;
    const qty = parseFloat(tr.querySelector('.edit-qty').value)||1;
    const notes = tr.querySelector('.edit-notes')?.value || '';
    
    // إضافة بيانات إضافية للمادة إذا كانت متوفرة
    const materialType = tr.getAttribute('data-material-type') || '';
    const packagingUnit = tr.getAttribute('data-packaging-unit') || '';
    const packagingWeight = tr.getAttribute('data-packaging-weight') || '';
    const piecesPerPackage = tr.getAttribute('data-pieces-per-package') || '';
    
    payload.items.push({ 
      material_id: materialId, 
      material_name: name, 
      unit_cost: unitCost, 
      profit_percentage: profit, 
      quantity: qty,
      item_notes: notes,
      material_type: materialType,
      packaging_unit: packagingUnit,
      packaging_weight: packagingWeight,
      pieces_per_package: piecesPerPackage
    });
  });
  fetch(`/costs/quotations/${id}`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)})
    .then(r=>r.json()).then(data=>{
      if(data.success){
        showAlert('تم حفظ التعديلات','success');
        // إغلاق المودال بشكل صحيح
        const modal = bootstrap.Modal.getInstance(document.getElementById('editQuotationModal'));
        if (modal) {
            modal.hide();
        }
        // إزالة backdrop المعلق
        removeStuckBackdrop();
        setTimeout(()=>window.location.reload(),1000);
      } else {
        showAlert(data.message||'فشل الحفظ','error');
      }
    }).catch(()=>showAlert('فشل الحفظ','error'))
}

// تأكيد توفر الدوال في النطاق العام للاستخدام من HTML attributes
window.openEditQuotationModal = openEditQuotationModal;
window.deleteQuotation = deleteQuotation;
window.addMaterialRow = addMaterialRow;
window.updateMaterialData = updateMaterialData;
window.calculateRowTotal = calculateRowTotal;
window.manualFinalPriceChange = manualFinalPriceChange;
window.removeMaterialRow = removeMaterialRow;
window.saveEditQuotation = saveEditQuotation;
window.recalcEditRow = recalcEditRow;
window.manualEditFinalPriceChange = manualEditFinalPriceChange;
window.addEditMaterialRow = addEditMaterialRow;
window.removeEditMaterialRow = removeEditMaterialRow;
window.onSelectEditMaterial = onSelectEditMaterial;

// حذف صف مادة
function removeMaterialRow(rowId) {
    delete materialRows[rowId];
    document.querySelector(`#materialsTableBody tr[data-row-id="${rowId}"]`).remove();
    calculateTotalAmount();
}

// إرسال النموذج
document.getElementById('quotationForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const items = [];
    
    // إضافة المواد المختارة إلى النموذج
    Object.values(materialRows).forEach((row, index) => {
        if (row && row.materialId) {
            // التقط الملاحظات من الحقل
            const tr = document.querySelector(`#materialsTableBody tr[data-row-id="${row.rowId}"]`);
            row.notes = tr?.querySelector('.item-notes')?.value || '';
            items.push({
                material_id: row.materialId,
                material_name: row.materialName,
                material_type: row.materialType,
                packaging_unit: row.packagingUnit,
                packaging_weight: row.packagingWeight,
                pieces_per_package: row.piecesPerPackage,
                package_cost: row.unitCost,
                item_notes: row.notes,
                unit_cost: row.unitCost,
                profit_percentage: row.profitPercentage,
                quantity: row.quantity
            });
        }
    });
    
    fetch('/costs/quotations', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            client_name: formData.get('client_name'),
            client_phone: formData.get('client_phone'),
            client_address: formData.get('client_address'),
            notes: formData.get('notes'),
            general_profit_percentage: formData.get('general_profit_percentage'),
            currency: defaultCurrencyCode, // إرسال العملة المختارة
            items: items
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showAlert('تم إنشاء عرض السعر بنجاح', 'success');
            this.reset();
            materialRows = [];
            document.getElementById('materialsTableBody').innerHTML = '';
            addMaterialRow();
            setTimeout(() => window.location.reload(), 1500);
        } else {
            showAlert(data.message || 'حدث خطأ في إنشاء عرض السعر', 'error');
        }
    })
    .catch(error => {
        showAlert('حدث خطأ في إنشاء عرض السعر', 'error');
    });
});

// حذف عرض سعر
function deleteQuotation(id) {
    if (confirm('هل أنت متأكد من حذف هذا العرض؟')) {
        fetch(`/costs/quotations/${id}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showAlert('تم حذف عرض السعر بنجاح', 'success');
                // إزالة backdrop المعلق
                removeStuckBackdrop();
                setTimeout(() => window.location.reload(), 1500);
            } else {
                showAlert(data.message || 'حدث خطأ في حذف عرض السعر', 'error');
            }
        })
        .catch(error => {
            showAlert('حدث خطأ في حذف عرض السعر', 'error');
        });
    }
}

// دالة عرض التنبيهات
function showAlert(message, type) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show`;
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.querySelector('.container').insertBefore(alertDiv, document.querySelector('.container').firstChild);
    
    // إزالة التنبيه تلقائياً بعد 5 ثوان
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.remove();
        }
    }, 5000);
}

// إضافة صف أول عند تحميل الصفحة
document.addEventListener('DOMContentLoaded', function() {
    addMaterialRow();
});
</script>

<style>
/* تحسين إمكانية الوصول */
.btn-close:focus {
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    outline: none;
}

.modal:focus {
    outline: none;
}

/* تحسين التركيز للعناصر القابلة للتركيز */
.form-control:focus,
.form-select:focus,
.btn:focus {
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    border-color: #86b7fe;
}

/* منع Bootstrap من إضافة aria-hidden */
.modal[aria-hidden] {
    aria-hidden: unset !important;
}

/* تحسين التركيز للمودالات */
.modal:not(.show) {
    display: none !important;
}

/* دعم inert attribute */
.modal[inert] {
    pointer-events: none;
}

.modal[inert] * {
    pointer-events: none;
}

.modal[inert] input,
.modal[inert] button,
.modal[inert] select,
.modal[inert] textarea {
    pointer-events: none;
}

/* إصلاح مشكلة backdrop المعلق */
.modal-backdrop {
    z-index: 1040;
}

.modal-backdrop.show {
    opacity: 0.5;
}

/* إزالة backdrop المعلق عند عدم وجود مودال مفتوح */
body:not(.modal-open) .modal-backdrop {
    display: none !important;
}

/* تحسين إدارة overflow */
body.modal-open {
    overflow: hidden;
    padding-right: 0 !important;
}

/* تحسين عرض عمود المادة في جدول اختيار المواد */
#materialsTable th:first-child,
#materialsTable td:first-child {
    width: 30% !important;
    min-width: 250px !important;
    max-width: 350px;
}

#materialsTable .material-select {
    width: 100% !important;
    font-size: 0.9rem;
}

#materialsTable .material-select option {
    white-space: normal !important;
    word-wrap: break-word !important;
    padding: 8px 12px;
}

/* تحسين عرض النص الطويل في خلايا الجدول */
#materialsTable td {
    word-wrap: break-word;
    white-space: normal;
    vertical-align: top;
}

/* تحسين جدول التعديل أيضاً */
#editItemsTable th:first-child,
#editItemsBody td:first-child {
    width: 30% !important;
    min-width: 250px !important;
    max-width: 350px;
    word-wrap: break-word;
    white-space: normal;
}

#editItemsBody .edit-material-select {
    width: 100% !important;
    font-size: 0.9rem;
}

#editItemsTable .edit-material-select option {
    white-space: normal !important;
    word-wrap: break-word !important;
    padding: 8px 12px;
}

/* تأكد من أن جدول التعديل يأخذ العرض الكامل */
#editItemsTable {
    width: 100%;
    table-layout: fixed;
}

/* تحسين التمرير الأفقي للجدول */
.table-responsive {
    overflow-x: auto;
    min-height: 200px;
}

/* تأكد من أن الجدول يأخذ العرض الكامل */
#materialsTable {
    width: 100%;
    table-layout: fixed;
}

/* تحسين عرض المودالات الكبيرة */
.modal-xl {
    max-width: 90vw !important;
}

@media (max-width: 1200px) {
    .modal-xl {
        max-width: 95vw !important;
    }
    
    #materialsTable th:first-child,
    #materialsTable td:first-child,
    #editItemsTable th:first-child,
    #editItemsBody td:first-child {
        min-width: 200px !important;
        width: 25% !important;
    }
}

@media (max-width: 768px) {
    .modal-xl {
        max-width: 98vw !important;
    }
    
    #materialsTable th:first-child,
    #materialsTable td:first-child,
    #editItemsTable th:first-child,
    #editItemsBody td:first-child {
        min-width: 180px !important;
        width: 35% !important;
    }
    
    .table-responsive {
        font-size: 0.85rem;
    }
}

/* تحسين padding للمودالات الكبيرة */
.modal-xl .modal-body {
    padding: 1.5rem;
}

.modal-xl .table-responsive {
    margin-bottom: 1rem;
}
</style> 