<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="bi bi-file-earmark-text"></i> عروض الأسعار</h2>
                <div class="d-flex gap-2">
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createQuotationModal">
                        <i class="bi bi-plus-circle me-1"></i> إضافة عرض سعر
                    </button>
                <a href="/costs" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-right me-1"></i> العودة للتكاليف
                </a>
                </div>
            </div>

            <!-- Modal إنشاء عرض سعر جديد -->
            <div class="modal fade" id="createQuotationModal" tabindex="-1">
              <div class="modal-dialog modal-xl">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-plus-circle"></i> إنشاء عرض سعر جديد</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                  <div class="modal-body">
                    <form id="quotationForm" method="POST" action="/costs/quotations">
                        <!-- بيانات العميل -->
                        <div class="row g-3 mb-4">
                            <div class="col-md-6">
                                <label class="form-label">اسم العميل *</label>
                                <input type="text" class="form-control" name="client_name" required>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">رقم الهاتف</label>
                                <input type="text" class="form-control" name="client_phone">
                            </div>
                            <div class="col-md-12">
                                <label class="form-label">العنوان</label>
                                <textarea class="form-control" name="client_address" rows="2"></textarea>
                            </div>
                            <div class="col-md-12">
                                <label class="form-label">ملاحظات</label>
                                <textarea class="form-control" name="notes" rows="2"></textarea>
                            </div>
                        </div>

                        <!-- اختيار المواد -->
                        <div class="mb-2">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h6 class="mb-0">اختيار المواد</h6>
                                <div>
                                <button type="button" class="btn btn-outline-primary btn-sm" onclick="addMaterialRow()">
                                    <i class="bi bi-plus"></i> إضافة مادة
                                </button>
                                </div>
                            </div>
                            <div class="table-responsive">
                                <table class="table table-bordered" id="materialsTable">
                                    <thead>
                                        <tr>
                                            <th>المادة</th>
                                            <th>كلفة الطرد</th>
                                            <th>نسبة الربح (%)</th>
                                            <th>السعر النهائي</th>
                                            <th>الكمية</th>
                                            <th>المجموع</th>
                                            <th>ملاحظات</th>
                                            <th>الإجراءات</th>
                                        </tr>
                                    </thead>
                                    <tbody id="materialsTableBody">
                                        <!-- سيتم إضافة الصفوف ديناميكياً -->
                                    </tbody>
                                    <tfoot>
                                        <tr class="table-info">
                                            <td colspan="5" class="text-end"><strong>المجموع الإجمالي:</strong></td>
                                            <td><strong id="totalAmount">0.00 <%= defaultCurrency ? defaultCurrency.symbol : '$' %></strong></td>
                                            <td></td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        </div>
                    </form>
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="submit" form="quotationForm" class="btn btn-primary">
                                <i class="bi bi-save me-1"></i> حفظ عرض السعر
                            </button>
                        </div>
                </div>
                </div>
            </div>

            <!-- جدول عروض الأسعار الموجودة -->
            <% if (quotations && quotations.length > 0) { %>
            <div class="card shadow">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-list-ul"></i> عروض الأسعار المسجلة</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>رقم العرض</th>
                                    <th>اسم العميل</th>
                                    <th>عدد المواد</th>
                                    <th>المبلغ الإجمالي</th>
                                    <th>التاريخ</th>
                                    <th>الإجراءات</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% quotations.forEach(quotation => { %>
                                <tr>
                                    <td><%= quotation.quotation_number %></td>
                                    <td><%= quotation.client_name %></td>
                                    <td><%= quotation.items_count %></td>
                                    <td>
                                        <%= (defaultCurrency && defaultCurrency.code === 'SYP')
                                            ? String(Math.round(parseFloat(quotation.total_amount) || 0))
                                            : (parseFloat(quotation.total_amount) || 0).toFixed(2)
                                        %> <%= defaultCurrency ? defaultCurrency.symbol : '$' %>
                                    </td>
                                    <td><%= formatDate(quotation.created_at) %></td>
                                    <td>
                                        <div class="btn-group">
                                            <a href="/costs/quotations/<%= quotation.id %>" class="btn btn-sm btn-info" title="معاينة">
                                                <i class="bi bi-eye"></i>
                                            </a>
                                            <button type="button" class="btn btn-sm btn-primary" onclick="openEditQuotationModal(<%= quotation.id %>)" title="تعديل">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-danger" onclick="deleteQuotation(<%= quotation.id %>)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                <% }); %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <% } %>
        </div>
    </div>
</div>

<!-- Modal تعديل عرض السعر -->
<div class="modal fade" id="editQuotationModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">تعديل عرض السعر</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="editQuotationForm">
          <input type="hidden" id="editQuotationId">
          <div class="row g-3 mb-3">
            <div class="col-md-6">
              <label class="form-label">اسم العميل</label>
              <input type="text" class="form-control" id="editClientName" required>
            </div>
            <div class="col-md-6">
              <label class="form-label">رقم الهاتف</label>
              <input type="text" class="form-control" id="editClientPhone">
            </div>
            <div class="col-12">
              <label class="form-label">العنوان</label>
              <textarea class="form-control" id="editClientAddress" rows="2"></textarea>
            </div>
            <div class="col-12">
              <label class="form-label">ملاحظات</label>
              <textarea class="form-control" id="editNotes" rows="2"></textarea>
            </div>
          </div>

          <div class="d-flex justify-content-between align-items-center mb-2">
            <h6 class="mb-0">تعديل المواد</h6>
            <button type="button" class="btn btn-outline-primary btn-sm" onclick="addEditMaterialRow()">
              <i class="bi bi-plus"></i> إضافة مادة
            </button>
          </div>
          <div class="table-responsive">
            <table class="table table-bordered" id="editItemsTable">
              <thead>
                <tr>
                  <th>المادة</th>
                  <th>كلفة الطرد</th>
                  <th>نسبة الربح (%)</th>
                  <th>السعر النهائي</th>
                  <th>الكمية</th>
                  <th>المجموع</th>
                  <th>الإجراءات</th>
                </tr>
              </thead>
              <tbody id="editItemsBody"></tbody>
              <tfoot>
                <tr class="table-info">
                  <td colspan="5" class="text-end"><strong>المجموع الإجمالي:</strong></td>
                  <td><strong id="editTotalAmount">0.00 <%= defaultCurrency ? defaultCurrency.symbol : '$' %></strong></td>
                  <td></td>
                </tr>
              </tfoot>
            </table>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
        <button type="button" class="btn btn-primary" onclick="saveEditQuotation()">حفظ التعديلات</button>
      </div>
        </div>
    </div>
</div>

<script>
const exchangeRate = <%= exchangeRate %>;
const defaultCurrencyCode = '<%= defaultCurrency ? defaultCurrency.code : "USD" %>';
const formatUSD = (v) => (parseFloat(v) || 0).toFixed(2);
const formatSYP = (v) => String(Math.round(parseFloat(v) || 0));
const displayMoney = (v) => defaultCurrencyCode === 'SYP' ? formatSYP(v) : formatUSD(v);
// المواد المتاحة
const materials = <%- JSON.stringify(materials || []) %>;
let materialRows = [];

// إضافة صف مادة جديد
function addMaterialRow() {
    const tbody = document.getElementById('materialsTableBody');
    const rowIndex = materialRows.length;
    
    const row = document.createElement('tr');
    row.innerHTML = `
        <td>
            <select class="form-select material-select" onchange="updateMaterialData(${rowIndex}, this.value)">
                <option value="">اختر المادة</option>
                 ${materials.map(m => `<option value="${m.id}" 
                    data-type="${m.material_type||''}"
                    data-unit="${m.packaging_unit||''}"
                    data-weight="${m.packaging_weight||0}"
                    data-pieces="${m.pieces_per_package||1}"
                    data-package-cost="${m.package_cost}">
                    ${m.material_name}
                 </option>`).join('')}
            </select>
        </td>
        <td>
            <input type="number" class="form-control unit-cost" readonly>
        </td>
        <td>
            <input type="number" class="form-control profit-percentage" step="0.01" value="0" onchange="calculateRowTotal(${rowIndex})">
        </td>
        <td>
            <input type="number" class="form-control final-price" step="0.01" onchange="manualFinalPriceChange(${rowIndex}, this)">
        </td>
        <td>
            <input type="number" class="form-control quantity" value="1" min="1" onchange="calculateRowTotal(${rowIndex})">
        </td>
        <td>
            <input type="number" class="form-control row-total" readonly>
        </td>
        <td>
            <input type="text" class="form-control item-notes" placeholder="ملاحظات">
        </td>
        <td>
            <button type="button" class="btn btn-sm btn-danger" onclick="removeMaterialRow(${rowIndex})">
                <i class="bi bi-trash"></i>
            </button>
        </td>
    `;
    
    tbody.appendChild(row);
    materialRows.push({
        materialId: '',
        materialName: '',
        materialType: '',
        packagingUnit: '',
        packagingWeight: 0,
        piecesPerPackage: 1,
        unitCost: 0,
        profitPercentage: 0,
        finalPrice: 0,
        quantity: 1,
        totalPrice: 0,
        notes: ''
    });
}

// تحديث بيانات المادة
function updateMaterialData(rowIndex, materialId) {
    const material = materials.find(m => m.id == materialId);
    if (!material) return;
    
    const row = materialRows[rowIndex];
    row.materialId = material.id;
    row.materialName = material.material_name;
    row.materialType = material.material_type || '';
    row.packagingUnit = material.packaging_unit || '';
    row.packagingWeight = parseFloat(material.packaging_weight) || 0;
    row.piecesPerPackage = parseInt(material.pieces_per_package) || 1;
    row.unitCost = parseFloat(material.package_cost);
    
    const tr = document.querySelector(`#materialsTableBody tr:nth-child(${rowIndex + 1})`);
    tr.querySelector('.unit-cost').value = displayMoney(material.package_cost);
    
    calculateRowTotal(rowIndex);
}

// حساب مجموع الصف
function calculateRowTotal(rowIndex) {
    const row = materialRows[rowIndex];
    const tr = document.querySelector(`#materialsTableBody tr:nth-child(${rowIndex + 1})`);
    
    const profitPercentage = parseFloat(tr.querySelector('.profit-percentage').value) || 0;
    const quantity = parseInt(tr.querySelector('.quantity').value) || 1;
    
    row.profitPercentage = profitPercentage;
    row.quantity = quantity;
    
    const finalPrice = row.unitCost * (1 + profitPercentage / 100);
    const totalPrice = finalPrice * quantity;
    
    row.finalPrice = finalPrice;
    row.totalPrice = totalPrice;
    
    tr.querySelector('.final-price').value = displayMoney(finalPrice);
    tr.querySelector('.row-total').value = displayMoney(totalPrice);
    
    calculateTotalAmount();
}

// تغيير يدوي للسعر النهائي مع مزامنة نسبة الربح
function manualFinalPriceChange(rowIndex, inputEl){
  const tr = inputEl.closest('tr');
  const row = materialRows[rowIndex];
  const finalPrice = parseFloat(inputEl.value) || 0;
  const profit = row.unitCost > 0 ? ((finalPrice / row.unitCost) - 1) * 100 : 0;
  row.finalPrice = finalPrice;
  row.profitPercentage = profit;
  tr.querySelector('.profit-percentage').value = profit.toFixed(2);
  const quantity = parseInt(tr.querySelector('.quantity').value) || 1;
  row.quantity = quantity;
  row.totalPrice = finalPrice * quantity;
  tr.querySelector('.row-total').value = displayMoney(row.totalPrice);
    calculateTotalAmount();
}

// حساب المجموع الإجمالي
function calculateTotalAmount() {
    const total = materialRows.reduce((sum, row) => sum + row.totalPrice, 0);
    document.getElementById('totalAmount').textContent = displayMoney(total) + ' <%= defaultCurrency ? defaultCurrency.symbol : "$" %>';
}
// فتح مودال تعديل
function openEditQuotationModal(id) {
  fetch(`/costs/quotations/${id}/json`).then(r=>r.json()).then(data=>{
    if(!data.success) return showAlert(data.message||'تعذر جلب العرض','error');
    const q = data.quotation;
    const items = data.items||[];
    document.getElementById('editQuotationId').value = q.id;
    document.getElementById('editClientName').value = q.client_name||'';
    document.getElementById('editClientPhone').value = q.client_phone||'';
    document.getElementById('editClientAddress').value = q.client_address||'';
    document.getElementById('editNotes').value = q.notes||'';
    const tbody = document.getElementById('editItemsBody');
    tbody.innerHTML = '';
    items.forEach((it, idx)=>{
      const tr = document.createElement('tr');
      const unitCostDisplay = displayMoney(it.unit_cost);
      const finalPrice = it.unit_cost * (1 + (it.profit_percentage||0)/100);
      const totalPrice = finalPrice * it.quantity;
      tr.innerHTML = `
        <td>${it.material_name}<input type="hidden" class="edit-material-id" value="${it.material_id||''}"></td>
        <td><input type="number" class="form-control edit-unit-cost" value="${unitCostDisplay}" readonly></td>
        <td><input type="number" class="form-control edit-profit" step="0.01" value="${it.profit_percentage||0}" onchange="recalcEditRow(this)"></td>
        <td><input type="number" class="form-control edit-final" value="${displayMoney(finalPrice)}" readonly></td>
        <td><input type="number" class="form-control edit-qty" value="${it.quantity}" min="1" onchange="recalcEditRow(this)"></td>
        <td><input type="number" class="form-control edit-total" value="${displayMoney(totalPrice)}" readonly></td>
        <td><button type="button" class="btn btn-sm btn-danger" onclick="removeEditMaterialRow(this)"><i class="bi bi-trash"></i></button></td>`;
      tbody.appendChild(tr);
    });
    updateEditTotal();
    new bootstrap.Modal(document.getElementById('editQuotationModal')).show();
  }).catch(()=>showAlert('تعذر جلب العرض','error'))
}

function recalcEditRow(inputEl){
  const tr = inputEl.closest('tr');
  const unitCost = parseFloat(tr.querySelector('.edit-unit-cost').value.replace(/,/g,' '))||0;
  const profit = parseFloat(tr.querySelector('.edit-profit').value)||0;
  const qty = parseInt(tr.querySelector('.edit-qty').value)||1;
  const finalPrice = unitCost * (1 + profit/100);
  const total = finalPrice * qty;
  tr.querySelector('.edit-final').value = displayMoney(finalPrice);
  tr.querySelector('.edit-total').value = displayMoney(total);
  updateEditTotal();
}

// إضافة صف مادة جديد داخل مودال التعديل
function addEditMaterialRow(){
  const tbody = document.getElementById('editItemsBody');
  const tr = document.createElement('tr');
  const materialOptions = materials.map(m => `<option value="${m.id}"
    data-pkg="${m.package_cost}"
    data-type="${m.material_type||''}"
    data-unit="${m.packaging_unit||''}"
    data-weight="${m.packaging_weight||0}"
    data-pieces="${m.pieces_per_package||1}">
    ${m.material_name}
  </option>`).join('');
  tr.innerHTML = `
    <td>
      <select class="form-select edit-material-select" onchange="onSelectEditMaterial(this)">
        <option value="">اختر المادة</option>
        ${materialOptions}
      </select>
    </td>
    <td><input type="number" class="form-control edit-unit-cost" readonly></td>
    <td><input type="number" class="form-control edit-profit" step="0.01" value="0" onchange="recalcEditRow(this)"></td>
    <td><input type="number" class="form-control edit-final" value="0" readonly></td>
    <td><input type="number" class="form-control edit-qty" value="1" min="1" onchange="recalcEditRow(this)"></td>
    <td><input type="number" class="form-control edit-total" value="0" readonly></td>
    <td><input type="text" class="form-control edit-notes" placeholder="ملاحظات"></td>
    <td><button type="button" class="btn btn-sm btn-danger" onclick="removeEditMaterialRow(this)"><i class="bi bi-trash"></i></button></td>
  `;
  tbody.appendChild(tr);
}

function onSelectEditMaterial(selectEl){
  const tr = selectEl.closest('tr');
  const opt = selectEl.selectedOptions[0];
  const unit = parseFloat(opt?.getAttribute('data-pkg')||'0')||0;
  tr.querySelector('.edit-unit-cost').value = displayMoney(unit);
  // احفظ بيانات المادة المختارة
  tr.setAttribute('data-material-type', opt?.getAttribute('data-type')||'');
  tr.setAttribute('data-packaging-unit', opt?.getAttribute('data-unit')||'');
  tr.setAttribute('data-packaging-weight', opt?.getAttribute('data-weight')||'0');
  tr.setAttribute('data-pieces-per-package', opt?.getAttribute('data-pieces')||'1');
  // احفظ المعرّف المختار داخل صف التعديل
  let hidden = tr.querySelector('.edit-material-id');
  if (!hidden) {
    hidden = document.createElement('input');
    hidden.type = 'hidden';
    hidden.className = 'edit-material-id';
    tr.children[0].appendChild(hidden);
  }
  hidden.value = selectEl.value || '';
  recalcEditRow(tr.querySelector('.edit-profit'));
}

function removeEditMaterialRow(btn){
  const tr = btn.closest('tr');
  tr.remove();
  updateEditTotal();
}

function updateEditTotal(){
  let sum = 0;
  document.querySelectorAll('#editItemsBody .edit-total').forEach(i=>{ sum += parseFloat(i.value)||0; });
  document.getElementById('editTotalAmount').textContent = displayMoney(sum) + ' <%= defaultCurrency ? defaultCurrency.symbol : "$" %>';
}

function saveEditQuotation(){
  const id = document.getElementById('editQuotationId').value;
  const payload = {
    client_name: document.getElementById('editClientName').value,
    client_phone: document.getElementById('editClientPhone').value,
    client_address: document.getElementById('editClientAddress').value,
    notes: document.getElementById('editNotes').value,
    items: []
  };
  document.querySelectorAll('#editItemsBody tr').forEach(tr=>{
    // استخراج اسم المادة ومعرّفها من الصف
    const select = tr.querySelector('.edit-material-select');
    const hiddenId = tr.querySelector('.edit-material-id');
    let materialId = null;
    let name = '';
    if (select) {
      materialId = select.value ? parseInt(select.value) : null;
      name = (select.selectedOptions[0]?.textContent || '').trim();
    } else {
      materialId = hiddenId && hiddenId.value ? parseInt(hiddenId.value) : null;
      name = (tr.children[0].childNodes[0]?.textContent || tr.children[0].textContent || '').trim();
    }
    const unitCost = parseFloat(tr.querySelector('.edit-unit-cost').value)||0;
    const profit = parseFloat(tr.querySelector('.edit-profit').value)||0;
    const finalPrice = parseFloat(tr.querySelector('.edit-final').value)||0;
    const qty = parseInt(tr.querySelector('.edit-qty').value)||1;
    payload.items.push({ material_id: materialId, material_name: name, unit_cost: unitCost, profit_percentage: profit, quantity: qty });
  });
  fetch(`/costs/quotations/${id}`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)})
    .then(r=>r.json()).then(data=>{
      if(data.success){
        showAlert('تم حفظ التعديلات','success');
        bootstrap.Modal.getInstance(document.getElementById('editQuotationModal')).hide();
        setTimeout(()=>window.location.reload(),1000);
      } else {
        showAlert(data.message||'فشل الحفظ','error');
      }
    }).catch(()=>showAlert('فشل الحفظ','error'))
}

// تأكيد توفر الدوال في النطاق العام للاستخدام من HTML attributes
window.openEditQuotationModal = openEditQuotationModal;
window.deleteQuotation = deleteQuotation;
window.addMaterialRow = addMaterialRow;
window.updateMaterialData = updateMaterialData;
window.calculateRowTotal = calculateRowTotal;
window.manualFinalPriceChange = manualFinalPriceChange;
window.removeMaterialRow = removeMaterialRow;
window.saveEditQuotation = saveEditQuotation;
window.recalcEditRow = recalcEditRow;
window.addEditMaterialRow = addEditMaterialRow;
window.removeEditMaterialRow = removeEditMaterialRow;
window.onSelectEditMaterial = onSelectEditMaterial;

// حذف صف مادة
function removeMaterialRow(rowIndex) {
    materialRows.splice(rowIndex, 1);
    document.querySelector(`#materialsTableBody tr:nth-child(${rowIndex + 1})`).remove();
    calculateTotalAmount();
}

// إرسال النموذج
document.getElementById('quotationForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const items = [];
    
    // إضافة المواد المختارة إلى النموذج
    materialRows.forEach((row, index) => {
        if (row.materialId) {
            // التقط الملاحظات من الحقل
            const tr = document.querySelector(`#materialsTableBody tr:nth-child(${index + 1})`);
            row.notes = tr?.querySelector('.item-notes')?.value || '';
            items.push({
                material_id: row.materialId,
                material_name: row.materialName,
                material_type: row.materialType,
                packaging_unit: row.packagingUnit,
                packaging_weight: row.packagingWeight,
                pieces_per_package: row.piecesPerPackage,
                package_cost: row.unitCost,
                item_notes: row.notes,
                unit_cost: row.unitCost,
                profit_percentage: row.profitPercentage,
                quantity: row.quantity
            });
        }
    });
    
    fetch('/costs/quotations', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            client_name: formData.get('client_name'),
            client_phone: formData.get('client_phone'),
            client_address: formData.get('client_address'),
            notes: formData.get('notes'),
            general_profit_percentage: formData.get('general_profit_percentage'),
            items: items
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showAlert('تم إنشاء عرض السعر بنجاح', 'success');
            this.reset();
            materialRows = [];
            document.getElementById('materialsTableBody').innerHTML = '';
            addMaterialRow();
            setTimeout(() => window.location.reload(), 1500);
        } else {
            showAlert(data.message || 'حدث خطأ في إنشاء عرض السعر', 'error');
        }
    })
    .catch(error => {
        showAlert('حدث خطأ في إنشاء عرض السعر', 'error');
    });
});

// حذف عرض سعر
function deleteQuotation(id) {
    if (confirm('هل أنت متأكد من حذف هذا العرض؟')) {
        fetch(`/costs/quotations/${id}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showAlert('تم حذف عرض السعر بنجاح', 'success');
                setTimeout(() => window.location.reload(), 1500);
            } else {
                showAlert(data.message || 'حدث خطأ في حذف عرض السعر', 'error');
            }
        })
        .catch(error => {
            showAlert('حدث خطأ في حذف عرض السعر', 'error');
        });
    }
}

// دالة عرض التنبيهات
function showAlert(message, type) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show`;
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.querySelector('.container').insertBefore(alertDiv, document.querySelector('.container').firstChild);
    
    // إزالة التنبيه تلقائياً بعد 5 ثوان
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.remove();
        }
    }, 5000);
}

// إضافة صف أول عند تحميل الصفحة
document.addEventListener('DOMContentLoaded', function() {
    addMaterialRow();
});
</script> 